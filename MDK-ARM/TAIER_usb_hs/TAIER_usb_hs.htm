<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [TAIER_usb_hs\TAIER_usb_hs.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image TAIER_usb_hs\TAIER_usb_hs.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Sep 18 09:14:26 2024
<BR><P>
<H3>Maximum Stack Usage =       2840 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
f_parser &rArr; luaY_parser &rArr; mainfunc &rArr; statlist &rArr; statement &rArr; repeatstat &rArr;  statlist (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[49]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">ADC_IRQHandler</a><BR>
 <LI><a href="#[247]">reallymarkobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[247]">reallymarkobject</a><BR>
 <LI><a href="#[518]">runafewfinalizers</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[125]">GCTM</a><BR>
 <LI><a href="#[4e3]">traversethread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41f]">luaD_shrinkstack</a><BR>
 <LI><a href="#[29e]">luaS_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42b]">luaM_realloc_</a><BR>
 <LI><a href="#[254]">finishgencycle</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[286]">callallpendingfinalizers</a><BR>
 <LI><a href="#[447]">luaO_pushvfstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[498]">luaV_concat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[48b]">luaO_tostring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[284]">luaS_newlstr</a><BR>
 <LI><a href="#[3f4]">luaM_malloc_</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b9]">luaD_throw</a><BR>
 <LI><a href="#[26c]">basicgetobjname</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26c]">basicgetobjname</a><BR>
 <LI><a href="#[379]">formatvarinfo</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a4]">luaO_pushfstring</a><BR>
 <LI><a href="#[25e]">luaS_new</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[284]">luaS_newlstr</a><BR>
 <LI><a href="#[43e]">typeerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[28e]">luaD_growstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41b]">luaD_reallocstack</a><BR>
 <LI><a href="#[436]">prepcallclosemth</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41e]">luaD_seterrorobj</a><BR>
 <LI><a href="#[289]">callclosemethod</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28b]">luaD_callnoyield</a><BR>
 <LI><a href="#[28a]">luaD_call</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28d]">ccall</a><BR>
 <LI><a href="#[44b]">luaG_traceexec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b9]">luaD_throw</a><BR>
 <LI><a href="#[49a]">luaV_objlen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[288]">luaT_callTMres</a><BR>
 <LI><a href="#[44c]">luaH_newkey</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[257]">luaH_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[221]">luaH_finishset</a><BR>
 <LI><a href="#[300]">luaH_setint</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44c]">luaH_newkey</a><BR>
 <LI><a href="#[3c4]">luaH_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b9]">luaD_throw</a><BR>
 <LI><a href="#[451]">setnodevector</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[262]">luaV_finishset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[491]">luaT_callTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28b]">luaD_callnoyield</a><BR>
 <LI><a href="#[260]">luaV_finishget</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[220]">luaV_equalobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[288]">luaT_callTMres</a><BR>
 <LI><a href="#[291]">luaV_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[498]">luaV_concat</a><BR>
 <LI><a href="#[2ac]">checkclosemth</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[3c7]">luaV_mod</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[3c8]">luaV_idiv</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[448]">luaG_tointerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[488]">luaT_trybinTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[287]">callbinTM</a><BR>
 <LI><a href="#[446]">luaG_ordererror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[3e6]">luaT_callorderTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[287]">callbinTM</a><BR>
 <LI><a href="#[37b]">forprep</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[376]">luaG_forerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[28f]">luaE_checkcstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ae]">luaG_runerror</a><BR>
 <LI><a href="#[236]">pushstr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[284]">luaS_newlstr</a><BR>
 <LI><a href="#[441]">luaG_errormsg</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b9]">luaD_throw</a><BR>
 <LI><a href="#[3b9]">growstrtab</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b9]">luaD_throw</a><BR>
 <LI><a href="#[430]">luaE_resetthread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41b]">luaD_reallocstack</a><BR>
 <LI><a href="#[2b9]">luaD_throw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b9]">luaD_throw</a><BR>
 <LI><a href="#[362]">findfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[362]">findfield</a><BR>
 <LI><a href="#[3e9]">txtToken</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a9]">save</a><BR>
 <LI><a href="#[350]">subexpr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[350]">subexpr</a><BR>
 <LI><a href="#[511]">yindex</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[302]">expr</a><BR>
 <LI><a href="#[51d]">singlevaraux</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51d]">singlevaraux</a><BR>
 <LI><a href="#[4dc]">primaryexp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[302]">expr</a><BR>
 <LI><a href="#[34f]">explist</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[302]">expr</a><BR>
 <LI><a href="#[35e]">recfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[302]">expr</a><BR>
 <LI><a href="#[35d]">listfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[302]">expr</a><BR>
 <LI><a href="#[275]">body</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[273]">statlist</a><BR>
 <LI><a href="#[271]">block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[273]">statlist</a><BR>
 <LI><a href="#[514]">repeatstat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[273]">statlist</a><BR>
 <LI><a href="#[3df]">labelstat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e0]">statement</a><BR>
 <LI><a href="#[3bf]">test_then_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[273]">statlist</a><BR>
 <LI><a href="#[353]">restassign</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[353]">restassign</a><BR>
 <LI><a href="#[3fb]">loadProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f9]">loadFunction</a><BR>
 <LI><a href="#[4b1]">start_capture</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[338]">match</a><BR>
 <LI><a href="#[4b7]">min_expand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[338]">match</a><BR>
 <LI><a href="#[4b6]">max_expand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[338]">match</a><BR>
 <LI><a href="#[338]">match</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[338]">match</a><BR>
 <LI><a href="#[337]">end_capture</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[338]">match</a><BR>
 <LI><a href="#[334]">dumpProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[332]">dumpFunction</a><BR>
 <LI><a href="#[263]">auxsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[263]">auxsort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[49]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[77]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[78]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[79]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[76]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">CDC_Control_HS</a> from usbd_cdc_if.o(i.CDC_Control_HS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[1e]">CDC_DeInit_HS</a> from usbd_cdc_if.o(i.CDC_DeInit_HS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[1d]">CDC_Init_HS</a> from usbd_cdc_if.o(i.CDC_Init_HS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[20]">CDC_Receive_HS</a> from usbd_cdc_if.o(i.CDC_Receive_HS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[21]">CDC_TransmitCplt_HS</a> from usbd_cdc_if.o(i.CDC_TransmitCplt_HS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[85]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[90]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6f]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[70]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[71]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[72]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[73]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7d]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[74]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[75]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[87]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[86]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[80]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7f]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8f]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8e]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7a]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[82]">OTG_HS_EP1_IN_IRQHandler</a> from stm32f4xx_it.o(i.OTG_HS_EP1_IN_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[81]">OTG_HS_EP1_OUT_IRQHandler</a> from stm32f4xx_it.o(i.OTG_HS_EP1_OUT_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[84]">OTG_HS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_HS_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[83]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9c]">Preesure_Test_Task</a> from freertos.o(i.Preesure_Test_Task) referenced from freertos.o(i.MX_FREERTOS_Init)
 <LI><a href="#[3c]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8d]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[68]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6a]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8a]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8b]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8c]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[99]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(i.MX_FREERTOS_Init)
 <LI><a href="#[36]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[92]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[39]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6d]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6e]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6b]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[88]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[89]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">USART1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7e]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">USBD_CDC_DataIn</a> from usbd_cdc.o(i.USBD_CDC_DataIn) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[27]">USBD_CDC_DataOut</a> from usbd_cdc.o(i.USBD_CDC_DataOut) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[23]">USBD_CDC_DeInit</a> from usbd_cdc.o(i.USBD_CDC_DeInit) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[25]">USBD_CDC_EP0_RxReady</a> from usbd_cdc.o(i.USBD_CDC_EP0_RxReady) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[2b]">USBD_CDC_GetDeviceQualifierDescriptor</a> from usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[29]">USBD_CDC_GetFSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[28]">USBD_CDC_GetHSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[2a]">USBD_CDC_GetOtherSpeedCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[22]">USBD_CDC_Init</a> from usbd_cdc.o(i.USBD_CDC_Init) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[24]">USBD_CDC_Setup</a> from usbd_cdc.o(i.USBD_CDC_Setup) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[19]">USBD_HS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_HS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[14]">USBD_HS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_HS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1a]">USBD_HS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_HS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[15]">USBD_HS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_HS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[16]">USBD_HS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_HS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[17]">USBD_HS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_HS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[18]">USBD_HS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_HS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1b]">USBD_WinUSBOSFeatureDescriptor</a> from usbd_desc.o(i.USBD_WinUSBOSFeatureDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1c]">USBD_WinUSBOSPropertyDescriptor</a> from usbd_desc.o(i.USBD_WinUSBOSPropertyDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2c]">USBD_WinUSBOSStrDescriptor</a> from usbd_desc.o(i.USBD_WinUSBOSStrDescriptor) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[32]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[93]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[95]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[94]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[9f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[a0]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[d0]">arith_add</a> from lstrlib.o(i.arith_add) referenced from lstrlib.o(.constdata)
 <LI><a href="#[d5]">arith_div</a> from lstrlib.o(i.arith_div) referenced from lstrlib.o(.constdata)
 <LI><a href="#[d6]">arith_idiv</a> from lstrlib.o(i.arith_idiv) referenced from lstrlib.o(.constdata)
 <LI><a href="#[d3]">arith_mod</a> from lstrlib.o(i.arith_mod) referenced from lstrlib.o(.constdata)
 <LI><a href="#[d2]">arith_mul</a> from lstrlib.o(i.arith_mul) referenced from lstrlib.o(.constdata)
 <LI><a href="#[d4]">arith_pow</a> from lstrlib.o(i.arith_pow) referenced from lstrlib.o(.constdata)
 <LI><a href="#[d1]">arith_sub</a> from lstrlib.o(i.arith_sub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[d7]">arith_unm</a> from lstrlib.o(i.arith_unm) referenced from lstrlib.o(.constdata)
 <LI><a href="#[b6]">boxgc</a> from lauxlib.o(i.boxgc) referenced 2 times from lauxlib.o(.constdata)
 <LI><a href="#[a8]">closepaux</a> from ldo.o(i.closepaux) referenced from ldo.o(i.luaD_closeprotected)
 <LI><a href="#[9d]">cmdHandleTask</a> from freertos.o(i.cmdHandleTask) referenced from freertos.o(i.MX_FREERTOS_Init)
 <LI><a href="#[a2]">dofilecont</a> from lbaselib.o(i.dofilecont) referenced from lbaselib.o(i.luaB_dofile)
 <LI><a href="#[97]">dothecall</a> from lgc.o(i.dothecall) referenced from lgc.o(i.GCTM)
 <LI><a href="#[ad]">f_call</a> from lapi.o(i.f_call) referenced from lapi.o(i.lua_pcallk)
 <LI><a href="#[ac]">f_luaopen</a> from lstate.o(i.f_luaopen) referenced from lstate.o(i.lua_newstate)
 <LI><a href="#[a9]">f_parser</a> from ldo.o(i.f_parser) referenced from ldo.o(i.luaD_protectedparser)
 <LI><a href="#[a7]">finishpcall</a> from lbaselib.o(i.finishpcall) referenced from lbaselib.o(i.luaB_pcall)
 <LI><a href="#[a7]">finishpcall</a> from lbaselib.o(i.finishpcall) referenced from lbaselib.o(i.luaB_xpcall)
 <LI><a href="#[9e]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[a4]">generic_reader</a> from lbaselib.o(i.generic_reader) referenced from lbaselib.o(i.luaB_load)
 <LI><a href="#[ab]">getF</a> from lauxlib.o(i.getF) referenced from lauxlib.o(i.luaL_loadfilex)
 <LI><a href="#[aa]">getS</a> from lauxlib.o(i.getS) referenced from lauxlib.o(i.luaL_loadbufferx)
 <LI><a href="#[dd]">gmatch</a> from lstrlib.o(i.gmatch) referenced from lstrlib.o(.constdata)
 <LI><a href="#[a1]">gmatch_aux</a> from lstrlib.o(i.gmatch_aux) referenced from lstrlib.o(i.gmatch)
 <LI><a href="#[a3]">ipairsaux</a> from lbaselib.o(i.ipairsaux) referenced from lbaselib.o(i.luaB_ipairs)
 <LI><a href="#[96]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[b7]">luaB_assert</a> from lbaselib.o(i.luaB_assert) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b8]">luaB_collectgarbage</a> from lbaselib.o(i.luaB_collectgarbage) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b9]">luaB_dofile</a> from lbaselib.o(i.luaB_dofile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[ba]">luaB_error</a> from lbaselib.o(i.luaB_error) referenced from lbaselib.o(.constdata)
 <LI><a href="#[bb]">luaB_getmetatable</a> from lbaselib.o(i.luaB_getmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[bc]">luaB_ipairs</a> from lbaselib.o(i.luaB_ipairs) referenced from lbaselib.o(.constdata)
 <LI><a href="#[be]">luaB_load</a> from lbaselib.o(i.luaB_load) referenced from lbaselib.o(.constdata)
 <LI><a href="#[bd]">luaB_loadfile</a> from lbaselib.o(i.luaB_loadfile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[a5]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(.constdata)
 <LI><a href="#[a5]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(i.luaB_pairs)
 <LI><a href="#[bf]">luaB_pairs</a> from lbaselib.o(i.luaB_pairs) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c0]">luaB_pcall</a> from lbaselib.o(i.luaB_pcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c1]">luaB_print</a> from lbaselib.o(i.luaB_print) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c3]">luaB_rawequal</a> from lbaselib.o(i.luaB_rawequal) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c5]">luaB_rawget</a> from lbaselib.o(i.luaB_rawget) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c4]">luaB_rawlen</a> from lbaselib.o(i.luaB_rawlen) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c6]">luaB_rawset</a> from lbaselib.o(i.luaB_rawset) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c7]">luaB_select</a> from lbaselib.o(i.luaB_select) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c8]">luaB_setmetatable</a> from lbaselib.o(i.luaB_setmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c9]">luaB_tonumber</a> from lbaselib.o(i.luaB_tonumber) referenced from lbaselib.o(.constdata)
 <LI><a href="#[ca]">luaB_tostring</a> from lbaselib.o(i.luaB_tostring) referenced from lbaselib.o(.constdata)
 <LI><a href="#[cb]">luaB_type</a> from lbaselib.o(i.luaB_type) referenced from lbaselib.o(.constdata)
 <LI><a href="#[c2]">luaB_warn</a> from lbaselib.o(i.luaB_warn) referenced from lbaselib.o(.constdata)
 <LI><a href="#[cc]">luaB_xpcall</a> from lbaselib.o(i.luaB_xpcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[b4]">lua_change_led_delay</a> from freertos.o(i.lua_change_led_delay) referenced from freertos.o(.constdata)
 <LI><a href="#[b5]">lua_delay</a> from freertos.o(i.lua_delay) referenced from freertos.o(.constdata)
 <LI><a href="#[ae]">lua_newstate</a> from lstate.o(i.lua_newstate) referenced from lstate.o(i.luai_makeseed)
 <LI><a href="#[cd]">luaopen_base</a> from lbaselib.o(i.luaopen_base) referenced from linit.o(.constdata)
 <LI><a href="#[cf]">luaopen_string</a> from lstrlib.o(i.luaopen_string) referenced from linit.o(.constdata)
 <LI><a href="#[ce]">luaopen_table</a> from ltablib.o(i.luaopen_table) referenced from linit.o(.constdata)
 <LI><a href="#[91]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a6]">pairscont</a> from lbaselib.o(i.pairscont) referenced from lbaselib.o(i.luaB_pairs)
 <LI><a href="#[b2]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[af]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[b3]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[98]">rtos_alloc_for_lua</a> from freertos.o(i.rtos_alloc_for_lua) referenced from freertos.o(i.Lua_script_init)
 <LI><a href="#[ef]">sort</a> from ltablib.o(i.sort) referenced from ltablib.o(.constdata)
 <LI><a href="#[d8]">str_byte</a> from lstrlib.o(i.str_byte) referenced from lstrlib.o(.constdata)
 <LI><a href="#[d9]">str_char</a> from lstrlib.o(i.str_char) referenced from lstrlib.o(.constdata)
 <LI><a href="#[da]">str_dump</a> from lstrlib.o(i.str_dump) referenced from lstrlib.o(.constdata)
 <LI><a href="#[db]">str_find</a> from lstrlib.o(i.str_find) referenced from lstrlib.o(.constdata)
 <LI><a href="#[dc]">str_format</a> from lstrlib.o(i.str_format) referenced from lstrlib.o(.constdata)
 <LI><a href="#[de]">str_gsub</a> from lstrlib.o(i.str_gsub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[df]">str_len</a> from lstrlib.o(i.str_len) referenced from lstrlib.o(.constdata)
 <LI><a href="#[e0]">str_lower</a> from lstrlib.o(i.str_lower) referenced from lstrlib.o(.constdata)
 <LI><a href="#[e1]">str_match</a> from lstrlib.o(i.str_match) referenced from lstrlib.o(.constdata)
 <LI><a href="#[e6]">str_pack</a> from lstrlib.o(i.str_pack) referenced from lstrlib.o(.constdata)
 <LI><a href="#[e7]">str_packsize</a> from lstrlib.o(i.str_packsize) referenced from lstrlib.o(.constdata)
 <LI><a href="#[e2]">str_rep</a> from lstrlib.o(i.str_rep) referenced from lstrlib.o(.constdata)
 <LI><a href="#[e3]">str_reverse</a> from lstrlib.o(i.str_reverse) referenced from lstrlib.o(.constdata)
 <LI><a href="#[e4]">str_sub</a> from lstrlib.o(i.str_sub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[e8]">str_unpack</a> from lstrlib.o(i.str_unpack) referenced from lstrlib.o(.constdata)
 <LI><a href="#[e5]">str_upper</a> from lstrlib.o(i.str_upper) referenced from lstrlib.o(.constdata)
 <LI><a href="#[e9]">tconcat</a> from ltablib.o(i.tconcat) referenced from ltablib.o(.constdata)
 <LI><a href="#[ea]">tinsert</a> from ltablib.o(i.tinsert) referenced from ltablib.o(.constdata)
 <LI><a href="#[ee]">tmove</a> from ltablib.o(i.tmove) referenced from ltablib.o(.constdata)
 <LI><a href="#[eb]">tpack</a> from ltablib.o(i.tpack) referenced from ltablib.o(.constdata)
 <LI><a href="#[ed]">tremove</a> from ltablib.o(i.tremove) referenced from ltablib.o(.constdata)
 <LI><a href="#[ec]">tunpack</a> from ltablib.o(i.tunpack) referenced from ltablib.o(.constdata)
 <LI><a href="#[9a]">vTaskLinkUsbCmdProcess</a> from freertos.o(i.vTaskLinkUsbCmdProcess) referenced from freertos.o(i.MX_FREERTOS_Init)
 <LI><a href="#[b1]">vTaskRunOneScript</a> from freertos.o(i.vTaskRunOneScript) referenced from freertos.o(i.vTaskLinkUsbCmdProcess)
 <LI><a href="#[9b]">vTaskSendMsgToHost</a> from freertos.o(i.vTaskSendMsgToHost) referenced from freertos.o(i.MX_FREERTOS_Init)
 <LI><a href="#[b0]">writer</a> from lstrlib.o(i.writer) referenced from lstrlib.o(i.str_dump)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[93]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[548]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[f0]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[110]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[549]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[54a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[54b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[54c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[54d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[33]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53f]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[53e]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[35]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52e]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[2d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37e]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc_u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[54e]"></a>ungetc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fgetc_u.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashint
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_search
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forprep
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_idiv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[54f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[550]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get2digits
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkformat
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[96]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[26b]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
</UL>

<P><STRONG><a name="[4b9]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>

<P><STRONG><a name="[3d9]"></a>localeconv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, localeconv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tostringbuff
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quotefloat
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_alloc_for_lua
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHostCmdtoQueue
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMsgToBuff
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_HS
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepbuffsize
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addstr2buff
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getformat
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copywithendian
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy2buff
</UL>

<P><STRONG><a name="[454]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapexps
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[551]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[552]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[553]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[554]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2b8]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[1b2]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_MSG
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
</UL>

<P><STRONG><a name="[fc]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEnv
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalattribute
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
</UL>

<P><STRONG><a name="[210]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quotefloat
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[2b6]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
</UL>

<P><STRONG><a name="[fb]"></a>strcoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strcoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcoll &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
</UL>

<P><STRONG><a name="[1ee]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[50a]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[26a]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tostringbuff
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getformat
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkformat
</UL>

<P><STRONG><a name="[3d7]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
</UL>

<P><STRONG><a name="[344]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_modf
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatforloop
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderiTM
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTfloatint
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfloatint
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
</UL>

<P><STRONG><a name="[526]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[1f9]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalkey
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quotefloat
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forprep
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_modf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forprep
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatforloop
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTfloatint
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfloatint
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_modf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTfloatint
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfloatint
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[429]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>

<P><STRONG><a name="[42f]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[555]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[556]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[557]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>

<P><STRONG><a name="[558]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[559]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[55a]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ff]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[1fa]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[55b]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[10e]"></a>_drem</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, drem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f1]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[55c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[113]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[94]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[55d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[55e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>AddHostCmdtoQueue</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, freertos.o(i.AddHostCmdtoQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AddHostCmdtoQueue &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandleTask
</UL>

<P><STRONG><a name="[31]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>CDC_Transmit_HS</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usbd_cdc_if.o(i.CDC_Transmit_HS))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CDC_Transmit_HS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSendMsgToHost
</UL>

<P><STRONG><a name="[6f]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[19e]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[12c]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[136]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[130]"></a>HAL_GPIO_Init</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[1af]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Preesure_Test_Task
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[137]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[13a]"></a>HAL_MspInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[13c]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[138]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[163]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1db]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ConnectCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[145]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HAL_PCD_EP_Abort</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Abort &rArr; USB_EPStopXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[14b]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[1da]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[14d]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[14f]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[151]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[154]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[155]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1738 bytes, Stack size 48 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = HAL_PCD_IRQHandler &rArr; PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdItfReq &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_EP1_OUT_IRQHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_EP1_IN_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback &rArr; USBD_LL_IsoINIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback &rArr; USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>HAL_PCD_Init</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[16f]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[16a]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ResumeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[17c]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdItfReq &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
</UL>

<P><STRONG><a name="[17e]"></a>HAL_PCD_Start</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[165]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[168]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[184]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1172 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[185]"></a>HAL_SPI_Init</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[186]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[187]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[188]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[305]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
</UL>

<P><STRONG><a name="[2f]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[193]"></a>Lua_script_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, freertos.o(i.Lua_script_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = Lua_script_init &rArr; luaL_loadstring &rArr; luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskLinkUsbCmdProcess
</UL>

<P><STRONG><a name="[19d]"></a>MX_ADC3_Init</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, adc.o(i.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>MX_DMA_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>MX_GPIO_Init</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>MX_SPI1_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>MX_TIM10_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tim.o(i.MX_TIM10_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_TIM10_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[30]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_HS_EP1_IN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = OTG_HS_EP1_IN_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdItfReq &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_HS_EP1_OUT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = OTG_HS_EP1_OUT_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdItfReq &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_HS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = OTG_HS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdItfReq &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>Preesure_Test_Task</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, freertos.o(i.Preesure_Test_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Preesure_Test_Task &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[1b1]"></a>Report_MSG</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, freertos.o(i.Report_MSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Report_MSG &rArr; AddMsgToBuff &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMsgToBuff
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSendMsgToHost
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskLinkUsbCmdProcess
</UL>

<P><STRONG><a name="[1b3]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>SEGGER_RTT_PutChar</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEGGER_RTT_PutChar &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[117]"></a>SEGGER_RTT_TerminalOut</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_TerminalOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SEGGER_RTT_TerminalOut &rArr; _PostTerminalSwitch &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostTerminalSwitch
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHostCmdtoQueue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>StartDefaultTask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = StartDefaultTask &rArr; MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[36]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1bc]"></a>SystemClock_Config</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[189]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2b]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[121]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_HS
</UL>

<P><STRONG><a name="[1ac]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[11f]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_SetRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_SetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_HS
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_HS
</UL>

<P><STRONG><a name="[11e]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, usbd_cdc.o(i.USBD_CDC_SetTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_HS
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_HS
</UL>

<P><STRONG><a name="[123]"></a>USBD_CDC_TransmitPacket</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_CDC_TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_HS
</UL>

<P><STRONG><a name="[1e7]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1d8]"></a>USBD_CoreFindEP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_CoreFindEP))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1d9]"></a>USBD_CoreFindIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_CoreFindIF))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
</UL>

<P><STRONG><a name="[1ca]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[1cb]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1c7]"></a>USBD_CtlError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WinUSBGetDescriptor
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1c6]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<P><STRONG><a name="[1cd]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1c5]"></a>USBD_CtlSendData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WinUSBGetDescriptor
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1c9]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1c1]"></a>USBD_GetEpDesc</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, usbd_core.o(i.USBD_GetEpDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_GetEpDesc &rArr; USBD_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetOtherSpeedCfgDesc
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetHSCfgDesc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetFSCfgDesc
</UL>

<P><STRONG><a name="[1d0]"></a>USBD_GetNextDesc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_GetNextDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>

<P><STRONG><a name="[1d2]"></a>USBD_GetString</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WinUSBOSStrDescriptor
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HS_ProductStrDescriptor
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HS_ManufacturerStrDescriptor
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HS_InterfaceStrDescriptor
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[1d6]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[19]"></a>USBD_HS_ConfigStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_HS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_HS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_HS_DeviceDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_HS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_HS_InterfaceStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_HS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_HS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_HS_LangIDStrDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_HS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBD_HS_ManufacturerStrDescriptor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_HS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_HS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBD_HS_ProductStrDescriptor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_HS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_HS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_HS_SerialStrDescriptor</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_desc.o(i.USBD_HS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_HS_SerialStrDescriptor &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1aa]"></a>USBD_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1d5]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1bf]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[142]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[144]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindIF
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[140]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[146]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[1be]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataOut
</UL>

<P><STRONG><a name="[1d4]"></a>USBD_LL_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1ea]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[16c]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[16d]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[1c3]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[1c4]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[177]"></a>USBD_LL_Reset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[178]"></a>USBD_LL_Resume</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[179]"></a>USBD_LL_SOF</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[176]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1dd]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[17d]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdItfReq &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[1cc]"></a>USBD_LL_StallEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1e2]"></a>USBD_LL_Start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[181]"></a>USBD_LL_Suspend</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[1bd]"></a>USBD_LL_Transmit</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataIn
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[1de]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_ParseSetupRequest &rArr; SWAPBYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWAPBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1ab]"></a>USBD_RegisterClass</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1d7]"></a>USBD_RunTestMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1e6]"></a>USBD_SetClassConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1ad]"></a>USBD_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1df]"></a>USBD_StdDevReq</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBD_StdDevReq &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WinUSBGetDescriptor
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1e1]"></a>USBD_StdEPReq</STRONG> (Thumb, 640 bytes, Stack size 32 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1e0]"></a>USBD_StdItfReq</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USBD_StdItfReq &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_WinUSBGetDescriptor
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindIF
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1b]"></a>USBD_WinUSBOSFeatureDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_WinUSBOSFeatureDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBD_WinUSBOSPropertyDescriptor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_WinUSBOSPropertyDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>USBD_WinUSBOSStrDescriptor</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_WinUSBOSStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_WinUSBOSStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1c0]"></a>USBD_static_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_free))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[1c2]"></a>USBD_static_malloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[14e]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[166]"></a>USB_ActivateSetup</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>USB_CoreInit</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_CoreInit &rArr; USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[14a]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[180]"></a>USB_DevConnect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[174]"></a>USB_DevDisconnect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[173]"></a>USB_DevInit</STRONG> (Thumb, 480 bytes, Stack size 36 bytes, stm32f4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[170]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[153]"></a>USB_EP0_OutStart</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>USB_EPClearStall</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[152]"></a>USB_EPSetStall</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[150]"></a>USB_EPStartXfer</STRONG> (Thumb, 944 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[148]"></a>USB_EPStopXfer</STRONG> (Thumb, 236 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_EPStopXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
</UL>

<P><STRONG><a name="[17f]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[1ed]"></a>USB_FlushRxFifo</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[160]"></a>USB_FlushTxFifo</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[167]"></a>USB_GetDevSpeed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_GetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>USB_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[15e]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadDevOutEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>USB_ReadInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>USB_ReadPacket</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>USB_SetCurrentMode</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[17b]"></a>USB_SetDevAddress</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[1ec]"></a>USB_SetDevSpeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[169]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_SetTurnaroundTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetTurnaroundTime
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ae]"></a>USB_WritePacket</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>

<P><STRONG><a name="[32]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1ef]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[55f]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[194]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_script_init
</UL>

<P><STRONG><a name="[560]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[561]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1f1]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[562]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[22b]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tostringbuff
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quotefloat
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[563]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[564]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1f2]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[565]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[534]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskLinkUsbCmdProcess
</UL>

<P><STRONG><a name="[566]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[567]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[203]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[343]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[568]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1f3]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
</UL>

<P><STRONG><a name="[1f4]"></a>__hardfp_fmod</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, fmod.o(i.__hardfp_fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp_fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_modf
</UL>

<P><STRONG><a name="[1f7]"></a>__hardfp_frexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, frexp.o(i.__hardfp_frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __hardfp_frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
</UL>

<P><STRONG><a name="[1f8]"></a>__hardfp_ldexp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
</UL>

<P><STRONG><a name="[1fd]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
</UL>

<P><STRONG><a name="[204]"></a>__hardfp_strtod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2dloc
</UL>

<P><STRONG><a name="[202]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1ff]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1fe]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1f6]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>

<P><STRONG><a name="[1fc]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[1fb]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[569]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[56a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[56b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1f5]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>

<P><STRONG><a name="[114]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[9d]"></a>cmdHandleTask</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, freertos.o(i.cmdHandleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cmdHandleTask &rArr; AddHostCmdtoQueue &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHostCmdtoQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[304]"></a>configureTimerForRunTimeStats</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, freertos.o(i.configureTimerForRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = configureTimerForRunTimeStats
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[201]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[9e]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputc &rArr; SEGGER_RTT_PutChar &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[37d]"></a>fread</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fread.o(i.fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fread
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getF
</UL>

<P><STRONG><a name="[396]"></a>fwrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fwrite.o(i.fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fwrite &rArr; fputc &rArr; SEGGER_RTT_PutChar &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[53a]"></a>getRunTimeCounterValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.getRunTimeCounterValue))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[39e]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipBOM
</UL>

<P><STRONG><a name="[223]"></a>luaC_barrier_</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lgc.o(i.luaC_barrier_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_closeupval
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProtos
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
</UL>

<P><STRONG><a name="[258]"></a>luaC_barrierback_</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lgc.o(i.luaC_barrierback_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaC_barrierback_
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkgclist_
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgclist
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_rawset
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[416]"></a>luaC_changemode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lgc.o(i.luaC_changemode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = luaC_changemode &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterinc
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
</UL>

<P><STRONG><a name="[417]"></a>luaC_checkfinalizer</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lgc.o(i.luaC_checkfinalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = luaC_checkfinalizer &rArr; sweeptolive &rArr; sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeptolive
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctpointers
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>

<P><STRONG><a name="[48e]"></a>luaC_fix</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lgc.o(i.luaC_fix))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[2cb]"></a>luaC_freeallobjects</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lgc.o(i.luaC_freeallobjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaC_freeallobjects &rArr; callallpendingfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deletelist
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callallpendingfinalizers
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[3ba]"></a>luaC_fullgc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lgc.o(i.luaC_fullgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullinc
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryagain
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstrtab
</UL>

<P><STRONG><a name="[31f]"></a>luaC_newobj</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lgc.o(i.luaC_newobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobjdt
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupval
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
</UL>

<P><STRONG><a name="[419]"></a>luaC_newobjdt</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lgc.o(i.luaC_newobjdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>

<P><STRONG><a name="[33a]"></a>luaC_runtilstate</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lgc.o(i.luaC_runtilstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepgenfull
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullinc
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>

<P><STRONG><a name="[2c9]"></a>luaC_step</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lgc.o(i.luaC_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incstep
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genstep
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precallC
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdatauv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_getvarargs
</UL>

<P><STRONG><a name="[28a]"></a>luaD_call</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ldo.o(i.luaD_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaD_call &rArr;  ccall (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccall
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callclosemethod
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[28b]"></a>luaD_callnoyield</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ldo.o(i.luaD_callnoyield))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = luaD_callnoyield &rArr; ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccall
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dothecall
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callclosemethod
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_call
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[2cc]"></a>luaD_closeprotected</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ldo.o(i.luaD_closeprotected))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = luaD_closeprotected &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_resetthread
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[28e]"></a>luaD_growstack</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ldo.o(i.luaD_growstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = luaD_growstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precallC
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccall
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_getvarargs
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_adjustvarargs
</UL>

<P><STRONG><a name="[41c]"></a>luaD_hook</STRONG> (Thumb, 198 bytes, Stack size 152 bytes, ldo.o(i.luaD_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = luaD_hook &rArr; luaD_growstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rethook
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precallC
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hookcall
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
</UL>

<P><STRONG><a name="[41d]"></a>luaD_hookcall</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ldo.o(i.luaD_hookcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = luaD_hookcall &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tracecall
</UL>

<P><STRONG><a name="[3ff]"></a>luaD_inctop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ldo.o(i.luaD_inctop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaD_inctop &rArr; luaD_growstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
</UL>

<P><STRONG><a name="[128]"></a>luaD_pcall</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, ldo.o(i.luaD_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_seterrorobj
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_closeprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
</UL>

<P><STRONG><a name="[420]"></a>luaD_poscall</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ldo.o(i.luaD_poscall))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = luaD_poscall &rArr; moveresults &rArr; rethook &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rethook
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveresults
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precallC
</UL>

<P><STRONG><a name="[290]"></a>luaD_precall</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, ldo.o(i.luaD_precall))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = luaD_precall &rArr; precallC &rArr; prepCallInfo &rArr; luaE_extendCI &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepCallInfo
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precallC
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccall
</UL>

<P><STRONG><a name="[426]"></a>luaD_pretailcall</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, ldo.o(i.luaD_pretailcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = luaD_pretailcall &rArr; precallC &rArr; prepCallInfo &rArr; luaE_extendCI &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precallC
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[427]"></a>luaD_protectedparser</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, ldo.o(i.luaD_protectedparser))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[41a]"></a>luaD_rawrunprotected</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ldo.o(i.luaD_rawrunprotected))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_closeprotected
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>

<P><STRONG><a name="[41b]"></a>luaD_reallocstack</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ldo.o(i.luaD_reallocstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relstack
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctstack
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_resetthread
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>

<P><STRONG><a name="[41e]"></a>luaD_seterrorobj</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ldo.o(i.luaD_seterrorobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaD_seterrorobj &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_resetthread
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepcallclosemth
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>

<P><STRONG><a name="[41f]"></a>luaD_shrinkstack</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ldo.o(i.luaD_shrinkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackinuse
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>

<P><STRONG><a name="[2b9]"></a>luaD_throw</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ldo.o(i.luaD_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + In Cycle
<LI>Call Chain = luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_resetthread
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_checkcstack
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstrtab
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[28f]"></a>luaE_checkcstack</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lstate.o(i.luaE_checkcstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = luaE_checkcstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccall
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCstack
</UL>

<P><STRONG><a name="[431]"></a>luaE_extendCI</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lstate.o(i.luaE_extendCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = luaE_extendCI &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepCallInfo
</UL>

<P><STRONG><a name="[386]"></a>luaE_freethread</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lstate.o(i.luaE_freethread))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_closeupval
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[433]"></a>luaE_incCstack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lstate.o(i.luaE_incCstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaE_incCstack &rArr; luaE_checkcstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_checkcstack
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
</UL>

<P><STRONG><a name="[430]"></a>luaE_resetthread</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lstate.o(i.luaE_resetthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + In Cycle
<LI>Call Chain = luaE_resetthread &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_seterrorobj
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_closeprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[3c3]"></a>luaE_setdebt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lstate.o(i.luaE_setdebt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setminordebt
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incstep
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>

<P><STRONG><a name="[42e]"></a>luaE_shrinkCI</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lstate.o(i.luaE_shrinkCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaE_shrinkCI &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[129]"></a>luaE_warnerror</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lstate.o(i.luaE_warnerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaE_warnerror &rArr; luaE_warning
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[434]"></a>luaE_warning</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lstate.o(i.luaE_warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaE_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_warnerror
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_warning
</UL>

<P><STRONG><a name="[2d1]"></a>luaF_close</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lfunc.o(i.luaF_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = luaF_close &rArr; prepcallclosemth &rArr;  luaD_seterrorobj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_closeupval
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepcallclosemth
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poptbclist
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveresults
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closepaux
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_closeslot
</UL>

<P><STRONG><a name="[432]"></a>luaF_closeupval</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lfunc.o(i.luaF_closeupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_unlinkupval
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>

<P><STRONG><a name="[437]"></a>luaF_findupval</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lfunc.o(i.luaF_findupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = luaF_findupval &rArr; newupval &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupval
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
</UL>

<P><STRONG><a name="[383]"></a>luaF_freeproto</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lfunc.o(i.luaF_freeproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaF_freeproto &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[26d]"></a>luaF_getlocalname</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lfunc.o(i.luaF_getlocalname))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_findlocal
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basicgetobjname
</UL>

<P><STRONG><a name="[35b]"></a>luaF_initupvals</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lfunc.o(i.luaF_initupvals))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = luaF_initupvals &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[439]"></a>luaF_newCclosure</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lfunc.o(i.luaF_newCclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = luaF_newCclosure &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>

<P><STRONG><a name="[43a]"></a>luaF_newLclosure</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lfunc.o(i.luaF_newLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = luaF_newLclosure &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
</UL>

<P><STRONG><a name="[232]"></a>luaF_newproto</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lfunc.o(i.luaF_newproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = luaF_newproto &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProtos
</UL>

<P><STRONG><a name="[43b]"></a>luaF_newtbcupval</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lfunc.o(i.luaF_newtbcupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = luaF_newtbcupval &rArr; checkclosemth &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclosemth
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toclose
</UL>

<P><STRONG><a name="[388]"></a>luaF_unlinkupval</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lfunc.o(i.luaF_unlinkupval))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeupval
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_closeupval
</UL>

<P><STRONG><a name="[3e8]"></a>luaG_addinfo</STRONG> (Thumb, 70 bytes, Stack size 88 bytes, ldebug.o(i.luaG_addinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>

<P><STRONG><a name="[43c]"></a>luaG_callerror</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ldebug.o(i.luaG_callerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = luaG_callerror &rArr; funcnamefromcall &rArr; funcnamefromcode &rArr; getobjname &rArr; rkname &rArr; rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcall
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatvarinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
</UL>

<P><STRONG><a name="[43f]"></a>luaG_concaterror</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ldebug.o(i.luaG_concaterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = luaG_concaterror &rArr; luaG_typeerror &rArr; varinfo &rArr; getobjname &rArr; rkname &rArr; rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_tryconcatTM
</UL>

<P><STRONG><a name="[441]"></a>luaG_errormsg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ldebug.o(i.luaG_errormsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + In Cycle
<LI>Call Chain = luaG_errormsg &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>

<P><STRONG><a name="[2ad]"></a>luaG_findlocal</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ldebug.o(i.luaG_findlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = luaG_findlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findvararg
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclosemth
</UL>

<P><STRONG><a name="[376]"></a>luaG_forerror</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ldebug.o(i.luaG_forerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = luaG_forerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forprep
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
</UL>

<P><STRONG><a name="[293]"></a>luaG_getfuncline</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ldebug.o(i.luaG_getfuncline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = luaG_getfuncline &rArr; getbaseline
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextline
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcurrentline
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changedline
</UL>

<P><STRONG><a name="[445]"></a>luaG_opinterror</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ldebug.o(i.luaG_opinterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = luaG_opinterror &rArr; luaG_typeerror &rArr; varinfo &rArr; getobjname &rArr; rkname &rArr; rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[446]"></a>luaG_ordererror</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ldebug.o(i.luaG_ordererror))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = luaG_ordererror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>

<P><STRONG><a name="[2ae]"></a>luaG_runerror</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ldebug.o(i.luaG_runerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcurrentline
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_checkcstack
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_forerror
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclosemth
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_idiv
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forprep
</UL>

<P><STRONG><a name="[448]"></a>luaG_tointerror</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ldebug.o(i.luaG_tointerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + In Cycle
<LI>Call Chain = luaG_tointerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[44a]"></a>luaG_tracecall</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ldebug.o(i.luaG_tracecall))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = luaG_tracecall &rArr; luaD_hookcall &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hookcall
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[44b]"></a>luaG_traceexec</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, ldebug.o(i.luaG_traceexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = luaG_traceexec &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_getfuncline
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changedline
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[440]"></a>luaG_typeerror</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ldebug.o(i.luaG_typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = luaG_typeerror &rArr; varinfo &rArr; getobjname &rArr; rkname &rArr; rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
</UL>

<P><STRONG><a name="[221]"></a>luaH_finishset</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ltable.o(i.luaH_finishset))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = luaH_finishset &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
</UL>

<P><STRONG><a name="[385]"></a>luaH_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ltable.o(i.luaH_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaH_free &rArr; freehash &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freehash
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[21f]"></a>luaH_get</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ltable.o(i.luaH_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = luaH_get &rArr; getgeneric &rArr; mainpositionTV &rArr; l_hashfloat &rArr; __hardfp_frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
</UL>

<P><STRONG><a name="[3bc]"></a>luaH_getint</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, ltable.o(i.luaH_getint))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = luaH_getint &rArr; hashint &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashint
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_search
</UL>

<P><STRONG><a name="[44e]"></a>luaH_getn</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, ltable.o(i.luaH_getn))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = luaH_getn &rArr; hash_search &rArr; luaH_getint &rArr; hashint &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ispow2realasize
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_search
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
</UL>

<P><STRONG><a name="[44d]"></a>luaH_getshortstr</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ltable.o(i.luaH_getshortstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
</UL>

<P><STRONG><a name="[25f]"></a>luaH_getstr</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, ltable.o(i.luaH_getstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = luaH_getstr &rArr; getgeneric &rArr; mainpositionTV &rArr; l_hashfloat &rArr; __hardfp_frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
</UL>

<P><STRONG><a name="[2fe]"></a>luaH_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ltable.o(i.luaH_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = luaH_new &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
</UL>

<P><STRONG><a name="[455]"></a>luaH_next</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ltable.o(i.luaH_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaH_next &rArr; findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>

<P><STRONG><a name="[2c5]"></a>luaH_realasize</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ltable.o(i.luaH_realasize))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbyvalues
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlimittosize
</UL>

<P><STRONG><a name="[3c4]"></a>luaH_resize</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, ltable.o(i.luaH_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + In Cycle
<LI>Call Chain = luaH_resize &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlimittosize
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinsert
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freehash
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exchangehashpart
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[459]"></a>luaH_resizearray</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ltable.o(i.luaH_resizearray))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = luaH_resizearray &rArr; luaH_resize &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[257]"></a>luaH_set</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, ltable.o(i.luaH_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + In Cycle
<LI>Call Chain = luaH_set &rArr;  luaH_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_finishset
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_rawset
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reinsert
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[300]"></a>luaH_setint</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, ltable.o(i.luaH_setint))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = luaH_setint &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>

<P><STRONG><a name="[378]"></a>luaK_checkstack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcode.o(i.luaK_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[2d6]"></a>luaK_code</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lcode.o(i.luaK_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codesJ
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeAsBx
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[2a1]"></a>luaK_codeABCk</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lcode.o(i.luaK_codeABCk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeconcat
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeABRK
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvararg
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktoclose
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
</UL>

<P><STRONG><a name="[2e6]"></a>luaK_codeABx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lcode.o(i.luaK_codeABx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
</UL>

<P><STRONG><a name="[34b]"></a>luaK_concat</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcode.o(i.luaK_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[323]"></a>luaK_dischargevars</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, lcode.o(i.luaK_dischargevars))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = luaK_dischargevars &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeregs
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const2val
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const2exp
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
</UL>

<P><STRONG><a name="[2e3]"></a>luaK_exp2anyreg</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2RK
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
</UL>

<P><STRONG><a name="[360]"></a>luaK_exp2anyregup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2anyregup))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = luaK_exp2anyregup &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[405]"></a>luaK_exp2const</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lcode.o(i.luaK_exp2const))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = luaK_exp2const &rArr; tonumeral
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const2val
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
</UL>

<P><STRONG><a name="[239]"></a>luaK_exp2nextreg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2nextreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[463]"></a>luaK_exp2val</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2val))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
</UL>

<P><STRONG><a name="[2c7]"></a>luaK_finish</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lcode.o(i.luaK_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaK_finish &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finaltarget
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[2ed]"></a>luaK_fixline</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcode.o(i.luaK_fixline))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaK_fixline &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removelastlineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeconcat
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[2d8]"></a>luaK_getlabel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcode.o(i.luaK_getlabel))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
</UL>

<P><STRONG><a name="[467]"></a>luaK_goiffalse</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcode.o(i.luaK_goiffalse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = luaK_goiffalse &rArr; jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[303]"></a>luaK_goiftrue</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lcode.o(i.luaK_goiftrue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = luaK_goiftrue &rArr; jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
</UL>

<P><STRONG><a name="[361]"></a>luaK_indexed</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lcode.o(i.luaK_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = luaK_indexed &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2K
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isKstr
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCint
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[469]"></a>luaK_infix</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lcode.o(i.luaK_infix))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = luaK_infix &rArr; exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCnumber
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2RK
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[327]"></a>luaK_int</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lcode.o(i.luaK_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = luaK_int &rArr; luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitsBx
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeAsBx
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[283]"></a>luaK_jump</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcode.o(i.luaK_jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = luaK_jump &rArr; codesJ &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codesJ
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
</UL>

<P><STRONG><a name="[23a]"></a>luaK_nil</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lcode.o(i.luaK_nil))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaK_nil &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;previousinstruction
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[3b8]"></a>luaK_patchlist</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, lcode.o(i.luaK_patchlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solvegoto
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
</UL>

<P><STRONG><a name="[34d]"></a>luaK_patchtohere</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcode.o(i.luaK_patchtohere))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaK_patchtohere &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
</UL>

<P><STRONG><a name="[46a]"></a>luaK_posfix</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, lcode.o(i.luaK_posfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = luaK_posfix &rArr; codecommutative &rArr; codearith &rArr; codebinNoK &rArr; codebinexpval &rArr; finishbinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapexps
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCint
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpneg
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeconcat
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecommutative
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebini
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[46b]"></a>luaK_prefix</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lcode.o(i.luaK_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = luaK_prefix &rArr; codeunexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[23b]"></a>luaK_reserveregs</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcode.o(i.luaK_reserveregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[2c6]"></a>luaK_ret</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, lcode.o(i.luaK_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaK_ret &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[46c]"></a>luaK_self</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcode.o(i.luaK_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = luaK_self &rArr; codeABRK &rArr; exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeABRK
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[2ab]"></a>luaK_semerror</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcode.o(i.luaK_semerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaK_semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpscopeerror
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalattribute
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_readonly
</UL>

<P><STRONG><a name="[2d0]"></a>luaK_setlist</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lcode.o(i.luaK_setlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaK_setlist &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
</UL>

<P><STRONG><a name="[45e]"></a>luaK_setoneret</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcode.o(i.luaK_setoneret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaK_setoneret
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
</UL>

<P><STRONG><a name="[238]"></a>luaK_setreturns</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lcode.o(i.luaK_setreturns))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaK_setreturns &rArr; luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[30c]"></a>luaK_settablesize</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, lcode.o(i.luaK_settablesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaK_settablesize
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[395]"></a>luaK_storevar</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lcode.o(i.luaK_storevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072<LI>Call Chain = luaK_storevar &rArr; codeABRK &rArr; exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeABRK
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
</UL>

<P><STRONG><a name="[20b]"></a>luaL_addlstring</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_addlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = luaL_addlstring &rArr; prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepbuffsize
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[233]"></a>luaL_addstring</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_addstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = luaL_addstring &rArr; luaL_addlstring &rArr; prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
</UL>

<P><STRONG><a name="[20e]"></a>luaL_addvalue</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_addvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = luaL_addvalue &rArr; prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepbuffsize
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[22d]"></a>luaL_argerror</STRONG> (Thumb, 122 bytes, Stack size 128 bytes, lauxlib.o(i.luaL_argerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[471]"></a>luaL_buffinit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_buffinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaL_buffinit
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlightuserdata
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[473]"></a>luaL_buffinitsize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_buffinitsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = luaL_buffinitsize &rArr; prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepbuffsize
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[474]"></a>luaL_callmeta</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_callmeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = luaL_callmeta &rArr; lua_callk &rArr; luaD_callnoyield &rArr; ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[406]"></a>luaL_checkany</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkany))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>

<P><STRONG><a name="[3cf]"></a>luaL_checkinteger</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checkinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_change_led_delay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunpack
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[3b0]"></a>luaL_checklstring</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checklstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_warn
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[476]"></a>luaL_checknumber</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checknumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = luaL_checknumber &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[407]"></a>luaL_checkoption</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_checkoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[397]"></a>luaL_checkstack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
</UL>

<P><STRONG><a name="[2be]"></a>luaL_checktype</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checktype))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = luaL_checktype &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[199]"></a>luaL_checkversion_</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, lauxlib.o(i.luaL_checkversion_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaL_checkversion_ &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_version
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_script_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
</UL>

<P><STRONG><a name="[20f]"></a>luaL_error</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbuffsize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunpack
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbalance
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getformat
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_onecapture
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classend
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkformat
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_capture
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_to_close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[40e]"></a>luaL_getmetafield</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_getmetafield))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = luaL_getmetafield &rArr; lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
</UL>

<P><STRONG><a name="[47a]"></a>luaL_getsubtable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_getsubtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = luaL_getsubtable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
</UL>

<P><STRONG><a name="[47c]"></a>luaL_len</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaL_len &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunpack
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
</UL>

<P><STRONG><a name="[40f]"></a>luaL_loadbufferx</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, lauxlib.o(i.luaL_loadbufferx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[40b]"></a>luaL_loadfilex</STRONG> (Thumb, 296 bytes, Stack size 560 bytes, lauxlib.o(i.luaL_loadfilex))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440<LI>Call Chain = luaL_loadfilex &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
</UL>

<P><STRONG><a name="[197]"></a>luaL_loadstring</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_loadstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = luaL_loadstring &rArr; luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRunOneScript
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_script_init
</UL>

<P><STRONG><a name="[47f]"></a>luaL_newmetatable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_newmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
</UL>

<P><STRONG><a name="[196]"></a>luaL_openlibs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, linit.o(i.luaL_openlibs))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = luaL_openlibs &rArr; luaL_requiref &rArr; lua_callk &rArr; luaD_callnoyield &rArr; ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_script_init
</UL>

<P><STRONG><a name="[3a2]"></a>luaL_optinteger</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunpack
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getendpos
</UL>

<P><STRONG><a name="[40a]"></a>luaL_optlstring</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
</UL>

<P><STRONG><a name="[20c]"></a>luaL_prepbuffsize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_prepbuffsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = luaL_prepbuffsize &rArr; prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepbuffsize
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packint
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[481]"></a>luaL_pushresult</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_pushresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = luaL_pushresult &rArr; lua_pushlstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_closeslot
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[484]"></a>luaL_pushresultsize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_pushresultsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = luaL_pushresultsize &rArr; luaL_pushresult &rArr; lua_pushlstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[480]"></a>luaL_requiref</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_requiref))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = luaL_requiref &rArr; lua_callk &rArr; luaD_callnoyield &rArr; ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
</UL>

<P><STRONG><a name="[19b]"></a>luaL_setfuncs</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_setfuncs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_script_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>

<P><STRONG><a name="[22c]"></a>luaL_tolstring</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, lauxlib.o(i.luaL_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaL_tolstring &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[411]"></a>luaL_typeerror</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[40d]"></a>luaL_where</STRONG> (Thumb, 64 bytes, Stack size 120 bytes, lauxlib.o(i.luaL_where))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[2cd]"></a>luaM_free_</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lmem.o(i.luaM_free_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeupval
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeCI
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freehash
</UL>

<P><STRONG><a name="[222]"></a>luaM_growaux_</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lmem.o(i.luaM_growaux_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocupvalue
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
</UL>

<P><STRONG><a name="[3f4]"></a>luaM_malloc_</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lmem.o(i.luaM_malloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + In Cycle
<LI>Call Chain = luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryagain
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobjdt
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadUpvalues
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProtos
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadDebug
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadConstants
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadCode
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
</UL>

<P><STRONG><a name="[42b]"></a>luaM_realloc_</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lmem.o(i.luaM_realloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = luaM_realloc_ &rArr; tryagain &rArr; luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryagain
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>

<P><STRONG><a name="[428]"></a>luaM_saferealloc_</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lmem.o(i.luaM_saferealloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_shrinkvector_
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>

<P><STRONG><a name="[2c8]"></a>luaM_shrinkvector_</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, lmem.o(i.luaM_shrinkvector_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaM_shrinkvector_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[3f3]"></a>luaM_toobig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lmem.o(i.luaM_toobig))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadUpvalues
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProtos
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadDebug
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadConstants
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadCode
</UL>

<P><STRONG><a name="[487]"></a>luaO_arith</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, lobject.o(i.luaO_arith))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = luaO_arith &rArr; luaO_rawarith &rArr; numarith &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_arith
</UL>

<P><STRONG><a name="[317]"></a>luaO_ceillog2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lobject.o(i.luaO_ceillog2))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_settablesize
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>

<P><STRONG><a name="[38d]"></a>luaO_chunkid</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, lobject.o(i.luaO_chunkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaO_chunkid
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcinfo
</UL>

<P><STRONG><a name="[3a6]"></a>luaO_hexavalue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lobject.o(i.luaO_hexavalue))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>

<P><STRONG><a name="[2a4]"></a>luaO_pushfstring</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lobject.o(i.luaO_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatvarinfo
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpscopeerror
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalattribute
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_readonly
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[447]"></a>luaO_pushvfstring</STRONG> (Thumb, 386 bytes, Stack size 272 bytes, lobject.o(i.luaO_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + In Cycle
<LI>Call Chain = luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbuff
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbuff
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addstr2buff
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addnum2buff
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>

<P><STRONG><a name="[308]"></a>luaO_rawarith</STRONG> (Thumb, 496 bytes, Stack size 80 bytes, lobject.o(i.luaO_rawarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = luaO_rawarith &rArr; numarith &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[3de]"></a>luaO_str2num</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lobject.o(i.luaO_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strton
</UL>

<P><STRONG><a name="[48b]"></a>luaO_tostring</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, lobject.o(i.luaO_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = luaO_tostring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tostringbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>

<P><STRONG><a name="[489]"></a>luaO_utf8esc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lobject.o(i.luaO_utf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaO_utf8esc
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
</UL>

<P><STRONG><a name="[250]"></a>luaS_clearcache</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lstring.o(i.luaS_clearcache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaS_clearcache
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[3fe]"></a>luaS_createlngstrobj</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lstring.o(i.luaS_createlngstrobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = luaS_createlngstrobj &rArr; createstrobj &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
</UL>

<P><STRONG><a name="[341]"></a>luaS_eqlngstr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lstring.o(i.luaS_eqlngstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = luaS_eqlngstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalkey
</UL>

<P><STRONG><a name="[3cb]"></a>luaS_hash</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lstring.o(i.luaS_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luai_makeseed
</UL>

<P><STRONG><a name="[48c]"></a>luaS_hashlongstr</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lstring.o(i.luaS_hashlongstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaS_hashlongstr &rArr; luaS_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
</UL>

<P><STRONG><a name="[356]"></a>luaS_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lstring.o(i.luaS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaS_init &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tablerehash
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[25e]"></a>luaS_new</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lstring.o(i.luaS_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = luaS_new &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
</UL>

<P><STRONG><a name="[284]"></a>luaS_newlstr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lstring.o(i.luaS_newlstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_seterrorobj
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
</UL>

<P><STRONG><a name="[48f]"></a>luaS_newudata</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lstring.o(i.luaS_newudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdatauv
</UL>

<P><STRONG><a name="[387]"></a>luaS_remove</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lstring.o(i.luaS_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaS_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[29e]"></a>luaS_resize</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lstring.o(i.luaS_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = luaS_resize &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tablerehash
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSizes
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstrtab
</UL>

<P><STRONG><a name="[490]"></a>luaT_adjustvarargs</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ltm.o(i.luaT_adjustvarargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = luaT_adjustvarargs &rArr; luaD_growstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[491]"></a>luaT_callTM</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ltm.o(i.luaT_callTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
</UL>

<P><STRONG><a name="[288]"></a>luaT_callTMres</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ltm.o(i.luaT_callTMres))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = luaT_callTMres &rArr; luaD_callnoyield &rArr; ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbinTM
</UL>

<P><STRONG><a name="[3e6]"></a>luaT_callorderTM</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ltm.o(i.luaT_callorderTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = luaT_callorderTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderiTM
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessthanothers
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequalothers
</UL>

<P><STRONG><a name="[492]"></a>luaT_callorderiTM</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, ltm.o(i.luaT_callorderiTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = luaT_callorderiTM &rArr; luaT_callorderTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[418]"></a>luaT_gettm</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ltm.o(i.luaT_gettm))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = luaT_gettm &rArr; luaH_getshortstr
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
</UL>

<P><STRONG><a name="[127]"></a>luaT_gettmbyobj</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ltm.o(i.luaT_gettmbyobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = luaT_gettmbyobj &rArr; luaH_getshortstr
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryfuncTM
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkclosemth
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callclosemethod
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbinTM
</UL>

<P><STRONG><a name="[493]"></a>luaT_getvarargs</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ltm.o(i.luaT_getvarargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = luaT_getvarargs &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[357]"></a>luaT_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ltm.o(i.luaT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaT_init &rArr; luaS_new &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[443]"></a>luaT_objtypename</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ltm.o(i.luaT_objtypename))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = luaT_objtypename &rArr; luaS_new &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_forerror
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>

<P><STRONG><a name="[488]"></a>luaT_trybinTM</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ltm.o(i.luaT_trybinTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = luaT_trybinTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinassocTM
</UL>

<P><STRONG><a name="[494]"></a>luaT_trybinassocTM</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ltm.o(i.luaT_trybinassocTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = luaT_trybinassocTM &rArr; luaT_trybinTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybiniTM
</UL>

<P><STRONG><a name="[495]"></a>luaT_trybiniTM</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, ltm.o(i.luaT_trybiniTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = luaT_trybiniTM &rArr; luaT_trybinassocTM &rArr; luaT_trybinTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinassocTM
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[496]"></a>luaT_tryconcatTM</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ltm.o(i.luaT_tryconcatTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = luaT_tryconcatTM &rArr; callbinTM &rArr; luaT_callTMres &rArr; luaD_callnoyield &rArr; ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>

<P><STRONG><a name="[497]"></a>luaU_dump</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, ldump.o(i.luaU_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = luaU_dump &rArr; dumpFunction &rArr; dumpConstants &rArr; dumpString &rArr; dumpSize &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpHeader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpFunction
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
</UL>

<P><STRONG><a name="[359]"></a>luaU_undump</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, lundump.o(i.luaU_undump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = luaU_undump &rArr; loadFunction &rArr; loadConstants &rArr; loadString &rArr; loadStringN &rArr; loadSize &rArr; loadUnsigned &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadByte
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[498]"></a>luaV_concat</STRONG> (Thumb, 458 bytes, Stack size 72 bytes, lvm.o(i.luaV_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + In Cycle
<LI>Call Chain = luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_tryconcatTM
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy2buff
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
</UL>

<P><STRONG><a name="[220]"></a>luaV_equalobj</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, lvm.o(i.luaV_equalobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + In Cycle
<LI>Call Chain = luaV_equalobj &rArr;  luaT_callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[291]"></a>luaV_execute</STRONG> (Thumb, 12764 bytes, Stack size 88 bytes, lvm.o(i.luaV_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + In Cycle
<LI>Call Chain = luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hookcall
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tracecall
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_closeupval
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newtbcupval
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_modf
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_idiv
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybiniTM
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinassocTM
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_getvarargs
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderiTM
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_adjustvarargs
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessthanothers
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequalothers
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forprep
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatforloop
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccall
</UL>

<P><STRONG><a name="[260]"></a>luaV_finishget</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lvm.o(i.luaV_finishget))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>

<P><STRONG><a name="[262]"></a>luaV_finishset</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, lvm.o(i.luaV_finishset))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + In Cycle
<LI>Call Chain = luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_finishset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>

<P><STRONG><a name="[18c]"></a>luaV_flttointeger</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lvm.o(i.luaV_flttointeger))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_float
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCnumber
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTfloatint
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfloatint
</UL>

<P><STRONG><a name="[3c8]"></a>luaV_idiv</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lvm.o(i.luaV_idiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = luaV_idiv &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[49c]"></a>luaV_lessequal</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lvm.o(i.luaV_lessequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = luaV_lessequal &rArr; LEnum &rArr; LEintfloat &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequalothers
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[49d]"></a>luaV_lessthan</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lvm.o(i.luaV_lessthan))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = luaV_lessthan &rArr; LTnum &rArr; LTintfloat &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessthanothers
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[3c7]"></a>luaV_mod</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lvm.o(i.luaV_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = luaV_mod &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[499]"></a>luaV_modf</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lvm.o(i.luaV_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = luaV_modf &rArr; __hardfp_fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
</UL>

<P><STRONG><a name="[49a]"></a>luaV_objlen</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, lvm.o(i.luaV_objlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = luaV_objlen &rArr;  luaT_callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
</UL>

<P><STRONG><a name="[3c9]"></a>luaV_shiftl</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lvm.o(i.luaV_shiftl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaV_shiftl
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[374]"></a>luaV_tointeger</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lvm.o(i.luaV_tointeger))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = luaV_tointeger &rArr; l_strton &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strton
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
</UL>

<P><STRONG><a name="[449]"></a>luaV_tointegerns</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lvm.o(i.luaV_tointegerns))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = luaV_tointegerns &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
</UL>

<P><STRONG><a name="[375]"></a>luaV_tonumber_</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lvm.o(i.luaV_tonumber_))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = luaV_tonumber_ &rArr; l_strton &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strton
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forprep
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
</UL>

<P><STRONG><a name="[358]"></a>luaX_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, llex.o(i.luaX_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaX_init &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[35c]"></a>luaX_lookahead</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, llex.o(i.luaX_lookahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = luaX_lookahead &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[278]"></a>luaX_newstring</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, llex.o(i.luaX_newstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_finishset
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[282]"></a>luaX_next</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, llex.o(i.luaX_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
</UL>

<P><STRONG><a name="[49e]"></a>luaX_setinput</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, llex.o(i.luaX_setinput))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = luaX_setinput &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[2a5]"></a>luaX_syntaxerror</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, llex.o(i.luaX_syntaxerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixforjump
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>

<P><STRONG><a name="[2a3]"></a>luaX_token2str</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, llex.o(i.luaX_token2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>

<P><STRONG><a name="[23d]"></a>luaY_nvarstack</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lparser.o(i.luaY_nvarstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaY_nvarstack &rArr; reglevel
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reglevel
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>

<P><STRONG><a name="[35a]"></a>luaY_parser</STRONG> (Thumb, 214 bytes, Stack size 176 bytes, lparser.o(i.luaY_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2808<LI>Call Chain = luaY_parser &rArr; mainfunc &rArr; statlist &rArr; statement &rArr; repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[2a7]"></a>luaZ_fill</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lzio.o(i.luaZ_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next1
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadByte
</UL>

<P><STRONG><a name="[4a3]"></a>luaZ_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lzio.o(i.luaZ_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaZ_init
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[3f0]"></a>luaZ_read</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lzio.o(i.luaZ_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = luaZ_read &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBlock
</UL>

<P><STRONG><a name="[475]"></a>lua_absindex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lapi.o(i.lua_absindex))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[244]"></a>lua_arith</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lapi.o(i.lua_arith))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lua_arith &rArr; luaO_arith &rArr; luaO_rawarith &rArr; numarith &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>

<P><STRONG><a name="[214]"></a>lua_callk</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lapi.o(i.lua_callk))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = lua_callk &rArr; luaD_callnoyield &rArr; ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[477]"></a>lua_checkstack</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lapi.o(i.lua_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lua_checkstack &rArr; luaD_growstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunpack
</UL>

<P><STRONG><a name="[483]"></a>lua_closeslot</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lapi.o(i.lua_closeslot))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lua_closeslot &rArr; luaF_close &rArr; prepcallclosemth &rArr;  luaD_seterrorobj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2stack
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
</UL>

<P><STRONG><a name="[4a1]"></a>lua_compare</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lapi.o(i.lua_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lua_compare &rArr; luaV_lessthan &rArr; LTnum &rArr; LTintfloat &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
</UL>

<P><STRONG><a name="[366]"></a>lua_concat</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lapi.o(i.lua_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[365]"></a>lua_copy</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lapi.o(i.lua_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lua_copy &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[19a]"></a>lua_createtable</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lapi.o(i.lua_createtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lua_createtable &rArr; luaH_resize &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_script_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpack
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>

<P><STRONG><a name="[4a2]"></a>lua_dump</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lapi.o(i.lua_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lua_dump &rArr; luaU_dump &rArr; dumpFunction &rArr; dumpConstants &rArr; dumpString &rArr; dumpSize &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[40c]"></a>lua_error</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lapi.o(i.lua_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_change_led_delay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>

<P><STRONG><a name="[195]"></a>lua_gc</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, lapi.o(i.lua_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lua_gc &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_script_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[515]"></a>lua_getallocf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_getallocf))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>

<P><STRONG><a name="[47b]"></a>lua_getfield</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lapi.o(i.lua_getfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lua_getfield &rArr; auxgetstr &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[21d]"></a>lua_geti</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, lapi.o(i.lua_geti))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lua_geti &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunpack
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>

<P><STRONG><a name="[46f]"></a>lua_getinfo</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ldebug.o(i.lua_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lua_getinfo &rArr; collectvalidlines &rArr; luaH_new &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[2bd]"></a>lua_getmetatable</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lapi.o(i.lua_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lua_getmetatable &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[46e]"></a>lua_getstack</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ldebug.o(i.lua_getstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lua_getstack
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>

<P><STRONG><a name="[216]"></a>lua_gettable</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lapi.o(i.lua_gettable))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lua_gettable &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[328]"></a>lua_gettop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_gettop))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_change_led_delay
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_warn
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dofilecont
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpack
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[227]"></a>lua_isinteger</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lapi.o(i.lua_isinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_isinteger &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[3cd]"></a>lua_isnumber</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lapi.o(i.lua_isnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lua_isnumber &rArr; luaV_tonumber_ &rArr; l_strton &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
</UL>

<P><STRONG><a name="[219]"></a>lua_isstring</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lapi.o(i.lua_isstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_isstring &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[47d]"></a>lua_len</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lapi.o(i.lua_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lua_len &rArr; luaV_objlen &rArr;  luaT_callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
</UL>

<P><STRONG><a name="[410]"></a>lua_load</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, lapi.o(i.lua_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_init
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
</UL>

<P><STRONG><a name="[ae]"></a>lua_newstate</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, lstate.o(i.lua_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = lua_newstate &rArr; close_state &rArr; luaC_freeallobjects &rArr; callallpendingfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preinit_thread
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luai_makeseed
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_script_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(i.luai_makeseed)
</UL>
<P><STRONG><a name="[3b2]"></a>lua_newuserdatauv</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lapi.o(i.lua_newuserdatauv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = lua_newuserdatauv &rArr; luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[367]"></a>lua_next</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lapi.o(i.lua_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = lua_next &rArr; luaH_next &rArr; findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[198]"></a>lua_pcallk</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, lapi.o(i.lua_pcallk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = lua_pcallk &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2stack
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRunOneScript
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_script_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
</UL>

<P><STRONG><a name="[36e]"></a>lua_pushboolean</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lapi.o(i.lua_pushboolean))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
</UL>

<P><STRONG><a name="[3b4]"></a>lua_pushcclosure</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lapi.o(i.lua_pushcclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lua_pushcclosure &rArr; luaF_newCclosure &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[345]"></a>lua_pushfstring</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lapi.o(i.lua_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[39d]"></a>lua_pushinteger</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lapi.o(i.lua_pushinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpack
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_onecapture
</UL>

<P><STRONG><a name="[472]"></a>lua_pushlightuserdata</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_pushlightuserdata))
<BR><BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
</UL>

<P><STRONG><a name="[482]"></a>lua_pushlstring</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lapi.o(i.lua_pushlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = lua_pushlstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
</UL>

<P><STRONG><a name="[363]"></a>lua_pushnil</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(i.lua_pushnil))
<BR><BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushmode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[408]"></a>lua_pushnumber</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lapi.o(i.lua_pushnumber))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[2b0]"></a>lua_pushstring</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lapi.o(i.lua_pushstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_change_led_delay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushmode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>

<P><STRONG><a name="[212]"></a>lua_pushvalue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lapi.o(i.lua_pushvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lua_pushvalue &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonum
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[479]"></a>lua_pushvfstring</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lapi.o(i.lua_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = lua_pushvfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[364]"></a>lua_rawequal</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lapi.o(i.lua_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lua_rawequal &rArr; luaV_equalobj &rArr;  luaT_callTMres (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[2b1]"></a>lua_rawget</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lapi.o(i.lua_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; mainpositionTV &rArr; l_hashfloat &rArr; __hardfp_frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishrawget
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
</UL>

<P><STRONG><a name="[4a7]"></a>lua_rawgeti</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, lapi.o(i.lua_rawgeti))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lua_rawgeti &rArr; luaH_getint &rArr; hashint &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishrawget
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
</UL>

<P><STRONG><a name="[412]"></a>lua_rawlen</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lapi.o(i.lua_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lua_rawlen &rArr; luaH_getn &rArr; hash_search &rArr; luaH_getint &rArr; hashint &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
</UL>

<P><STRONG><a name="[413]"></a>lua_rawset</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lapi.o(i.lua_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lua_rawset &rArr; aux_rawset &rArr; luaH_set &rArr;  luaH_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_rawset
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
</UL>

<P><STRONG><a name="[346]"></a>lua_rotate</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lapi.o(i.lua_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lua_rotate &rArr; reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2stack
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepbuffsize
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpack
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
</UL>

<P><STRONG><a name="[31d]"></a>lua_setfield</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lapi.o(i.lua_setfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpack
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>

<P><STRONG><a name="[19c]"></a>lua_setglobal</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lapi.o(i.lua_setglobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = lua_setglobal &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_script_init
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
</UL>

<P><STRONG><a name="[4a9]"></a>lua_seti</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, lapi.o(i.lua_seti))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = lua_seti &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpack
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
</UL>

<P><STRONG><a name="[31c]"></a>lua_setmetatable</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, lapi.o(i.lua_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lua_setmetatable &rArr; luaC_checkfinalizer &rArr; sweeptolive &rArr; sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>

<P><STRONG><a name="[218]"></a>lua_settop</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lapi.o(i.lua_settop))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lua_settop &rArr; luaF_close &rArr; prepcallclosemth &rArr;  luaD_seterrorobj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepbuffsize
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[401]"></a>lua_setupvalue</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lapi.o(i.lua_setupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lua_setupvalue &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
</UL>

<P><STRONG><a name="[414]"></a>lua_stringtonumber</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lapi.o(i.lua_stringtonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lua_stringtonumber &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonum
</UL>

<P><STRONG><a name="[217]"></a>lua_toboolean</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lapi.o(i.lua_toboolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_toboolean &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[4ab]"></a>lua_toclose</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lapi.o(i.lua_toclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = lua_toclose &rArr; luaF_newtbcupval &rArr; checkclosemth &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newtbcupval
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2stack
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepbuffsize
</UL>

<P><STRONG><a name="[22a]"></a>lua_tointegerx</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lapi.o(i.lua_tointegerx))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lua_tointegerx &rArr; luaV_tointeger &rArr; l_strton &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[20a]"></a>lua_tolstring</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lapi.o(i.lua_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lua_tolstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_warn
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonum
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[228]"></a>lua_tonumberx</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lapi.o(i.lua_tonumberx))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lua_tonumberx &rArr; luaV_tonumber_ &rArr; l_strton &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[485]"></a>lua_topointer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lapi.o(i.lua_topointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_topointer &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touserdata
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[3b5]"></a>lua_touserdata</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lapi.o(i.lua_touserdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_touserdata &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touserdata
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
</UL>

<P><STRONG><a name="[21a]"></a>lua_type</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lapi.o(i.lua_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_type &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunpack
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonum
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[21b]"></a>lua_typename</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lapi.o(i.lua_typename))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[478]"></a>lua_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lapi.o(i.lua_version))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>

<P><STRONG><a name="[415]"></a>lua_warning</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lapi.o(i.lua_warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lua_warning &rArr; luaE_warning
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_warn
</UL>

<P><STRONG><a name="[cd]"></a>luaopen_base</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lbaselib.o(i.luaopen_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaopen_base &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>luaopen_string</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lstrlib.o(i.luaopen_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaopen_string &rArr; createmetatable &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>luaopen_table</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ltablib.o(i.luaopen_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaopen_table &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1b0]"></a>osDelay</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskLinkUsbCmdProcess
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandleTask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Preesure_Test_Task
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_delay
</UL>

<P><STRONG><a name="[4c2]"></a>osKernelGetSysTimerCount</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cmsis_os2.o(i.osKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetOverflow
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetInterval
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSendMsgToHost
</UL>

<P><STRONG><a name="[4ad]"></a>osKernelInitialize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4ae]"></a>osKernelStart</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c7]"></a>osMessageQueueGet</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskLinkUsbCmdProcess
</UL>

<P><STRONG><a name="[1a3]"></a>osMessageQueueNew</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageQueueNew &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[119]"></a>osMessageQueuePut</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHostCmdtoQueue
</UL>

<P><STRONG><a name="[11c]"></a>osMutexAcquire</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSendMsgToHost
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMsgToBuff
</UL>

<P><STRONG><a name="[1a1]"></a>osMutexNew</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, cmsis_os2.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[11d]"></a>osMutexRelease</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSendMsgToHost
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMsgToBuff
</UL>

<P><STRONG><a name="[2d2]"></a>osSemaphoreAcquire</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdHandleTask
</UL>

<P><STRONG><a name="[1a2]"></a>osSemaphoreNew</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, cmsis_os2.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[120]"></a>osSemaphoreRelease</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cmsis_os2.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_HS
</UL>

<P><STRONG><a name="[1a4]"></a>osThreadNew</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[116]"></a>pvPortMalloc</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_alloc_for_lua
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHostCmdtoQueue
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[544]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[4f9]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[98]"></a>rtos_alloc_for_lua</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, freertos.o(i.rtos_alloc_for_lua))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rtos_alloc_for_lua &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.Lua_script_init)
</UL>
<P><STRONG><a name="[200]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3d5]"></a>time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loslib.o(i.time))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luai_makeseed
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_randomizePivot
</UL>

<P><STRONG><a name="[4e5]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[537]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[547]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[53b]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[4ed]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[4f8]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[4e7]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[4e6]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[4e9]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[4eb]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[4f3]"></a>vPortFree</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRunOneScript
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_alloc_for_lua
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[53d]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[52d]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[4cc]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[4d4]"></a>vQueueDelete</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[52f]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[504]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[4c1]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[531]"></a>vTaskDelayUntil</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSendMsgToHost
</UL>

<P><STRONG><a name="[532]"></a>vTaskDelete</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRunOneScript
</UL>

<P><STRONG><a name="[541]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[9a]"></a>vTaskLinkUsbCmdProcess</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, freertos.o(i.vTaskLinkUsbCmdProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = vTaskLinkUsbCmdProcess &rArr; Lua_script_init &rArr; luaL_loadstring &rArr; luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_MSG
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lua_script_init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[509]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[535]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[530]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[536]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[b1]"></a>vTaskRunOneScript</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, freertos.o(i.vTaskRunOneScript))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = vTaskRunOneScript &rArr; luaL_loadstring &rArr; luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.vTaskLinkUsbCmdProcess)
</UL>
<P><STRONG><a name="[9b]"></a>vTaskSendMsgToHost</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, freertos.o(i.vTaskSendMsgToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = vTaskSendMsgToHost &rArr; Report_MSG &rArr; AddMsgToBuff &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_HS
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_MSG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[4c6]"></a>vTaskStartScheduler</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[502]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[f2]"></a>vTaskSwitchContext</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[539]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1bb]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4d6]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[4d5]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateCountingSemaphoreStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[4d2]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[4d1]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[4cb]"></a>xQueueGenericCreate</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[4ca]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
</UL>

<P><STRONG><a name="[4f6]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[4ce]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[4cd]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[4d7]"></a>xQueueGiveFromISR</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[4d3]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[4c9]"></a>xQueueReceive</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[4c8]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[4d0]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[4cf]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[542]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[4d9]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskLinkUsbCmdProcess
</UL>

<P><STRONG><a name="[4d8]"></a>xTaskCreateStatic</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[543]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[1ba]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[11b]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSendMsgToHost
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMsgToBuff
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[540]"></a>xTaskIncrementTick</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[4f2]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[545]"></a>xTaskPriorityInherit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[508]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[503]"></a>xTaskResumeAll</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[538]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[4fe]"></a>xTimerGenericCommand</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11a]"></a>AddMsgToBuff</STRONG> (Thumb, 138 bytes, Stack size 288 bytes, freertos.o(i.AddMsgToBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = AddMsgToBuff &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_MSG
</UL>

<P><STRONG><a name="[b4]"></a>lua_change_led_delay</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, freertos.o(i.lua_change_led_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = lua_change_led_delay &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>lua_delay</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, freertos.o(i.lua_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = lua_delay &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>Get_SerialNum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_desc.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HS_SerialStrDescriptor
</UL>

<P><STRONG><a name="[12b]"></a>IntToUnicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[1f]"></a>CDC_Control_HS</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_Control_HS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>CDC_DeInit_HS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_DeInit_HS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>CDC_Init_HS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Init_HS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CDC_Init_HS &rArr; USBD_CDC_SetTxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>CDC_Receive_HS</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_cdc_if.o(i.CDC_Receive_HS))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CDC_Receive_HS &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>CDC_TransmitCplt_HS</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_TransmitCplt_HS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDC_TransmitCplt_HS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[15c]"></a>PCD_EP_OutSetupPacket_int</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.PCD_EP_OutSetupPacket_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdItfReq &rArr; USBD_WinUSBGetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>PCD_EP_OutXfrComplete_int</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, stm32f4xx_hal_pcd.o(i.PCD_EP_OutXfrComplete_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>USB_CoreReset</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[135]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[134]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[13d]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[13e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[12e]"></a>ADC_Init</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1e3]"></a>SWAPBYTE</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, usbd_ctlreq.o(i.SWAPBYTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SWAPBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>

<P><STRONG><a name="[1c8]"></a>USBD_ClrFeature</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1ce]"></a>USBD_GetConfig</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1cf]"></a>USBD_GetDescriptor</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1d3]"></a>USBD_GetLen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_GetLen))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[1d1]"></a>USBD_GetStatus</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1e4]"></a>USBD_SetAddress</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1e5]"></a>USBD_SetConfig</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1e8]"></a>USBD_SetFeature</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1e9]"></a>USBD_WinUSBGetDescriptor</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_WinUSBGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_WinUSBGetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[26]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_CDC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_CDC_DataIn &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CDC_DataOut &rArr; USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_CDC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CDC_GetFSCfgDesc &rArr; USBD_GetEpDesc &rArr; USBD_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CDC_GetHSCfgDesc &rArr; USBD_GetEpDesc &rArr; USBD_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_CDC_GetOtherSpeedCfgDesc &rArr; USBD_GetEpDesc &rArr; USBD_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBD_CDC_Init</STRONG> (Thumb, 528 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CDC_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>USBD_CDC_Setup</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, usbd_cdc.o(i.USBD_CDC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USBD_CDC_Setup &rArr; USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[4f0]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[4f1]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[546]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[4f4]"></a>prvInitialiseMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[4f5]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[4fb]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[4fc]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[507]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[4e4]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[4e8]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[4ee]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[4ef]"></a>prvDeleteTCB</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[b2]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[4f7]"></a>prvInitialiseNewTask</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[4ea]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[533]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[4ec]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[506]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[4fa]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[4fd]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[4ff]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[501]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[500]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[505]"></a>prvSwitchTimerLists</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[b3]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[4c3]"></a>OS_Tick_GetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os2.o(i.OS_Tick_GetCount))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[4c5]"></a>OS_Tick_GetInterval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsis_os2.o(i.OS_Tick_GetInterval))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[4c4]"></a>OS_Tick_GetOverflow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os2.o(i.OS_Tick_GetOverflow))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[4c0]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[50b]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[50c]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[af]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[255]"></a>aux_rawset</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lapi.o(i.aux_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = aux_rawset &rArr; luaH_set &rArr;  luaH_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
</UL>

<P><STRONG><a name="[4aa]"></a>aux_upvalue</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, lapi.o(i.aux_upvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
</UL>

<P><STRONG><a name="[25d]"></a>auxgetstr</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lapi.o(i.auxgetstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = auxgetstr &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>

<P><STRONG><a name="[261]"></a>auxsetstr</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, lapi.o(i.auxsetstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
</UL>

<P><STRONG><a name="[ad]"></a>f_call</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lapi.o(i.f_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = f_call &rArr; luaD_callnoyield &rArr; ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(i.lua_pcallk)
</UL>
<P><STRONG><a name="[4a6]"></a>finishrawget</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lapi.o(i.finishrawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finishrawget
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
</UL>

<P><STRONG><a name="[256]"></a>gettable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lapi.o(i.gettable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gettable &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_rawset
</UL>

<P><STRONG><a name="[4a0]"></a>index2stack</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lapi.o(i.index2stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = index2stack
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toclose
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_closeslot
</UL>

<P><STRONG><a name="[3ae]"></a>index2value</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, lapi.o(i.index2value))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = index2value
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettable
</UL>

<P><STRONG><a name="[4a8]"></a>reverse</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lapi.o(i.reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>

<P><STRONG><a name="[4ac]"></a>touserdata</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lapi.o(i.touserdata))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
</UL>

<P><STRONG><a name="[b6]"></a>boxgc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lauxlib.o(i.boxgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = boxgc &rArr; resizebox &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(.constdata)
</UL>
<P><STRONG><a name="[342]"></a>errfile</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lauxlib.o(i.errfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = errfile &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[362]"></a>findfield</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lauxlib.o(i.findfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + In Cycle
<LI>Call Chain = findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[ab]"></a>getF</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lauxlib.o(i.getF))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getF &rArr; fread
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_loadfilex)
</UL>
<P><STRONG><a name="[aa]"></a>getS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lauxlib.o(i.getS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_loadbufferx)
</UL>
<P><STRONG><a name="[3cc]"></a>interror</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lauxlib.o(i.interror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[4bb]"></a>newbox</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lauxlib.o(i.newbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdatauv
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepbuffsize
</UL>

<P><STRONG><a name="[4bc]"></a>newbuffsize</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lauxlib.o(i.newbuffsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = newbuffsize &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepbuffsize
</UL>

<P><STRONG><a name="[46d]"></a>prepbuffsize</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lauxlib.o(i.prepbuffsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbuffsize
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newbox
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toclose
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
</UL>

<P><STRONG><a name="[470]"></a>pushglobalfuncname</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lauxlib.o(i.pushglobalfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>

<P><STRONG><a name="[280]"></a>resizebox</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lauxlib.o(i.resizebox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = resizebox &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getallocf
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepbuffsize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boxgc
</UL>

<P><STRONG><a name="[520]"></a>skipBOM</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lauxlib.o(i.skipBOM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skipBOM
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
</UL>

<P><STRONG><a name="[47e]"></a>skipcomment</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lauxlib.o(i.skipcomment))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = skipcomment &rArr; skipBOM
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipBOM
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[3ce]"></a>tag_error</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lauxlib.o(i.tag_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interror
</UL>

<P><STRONG><a name="[269]"></a>b_str2int</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, lbaselib.o(i.b_str2int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = b_str2int &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
</UL>

<P><STRONG><a name="[a2]"></a>dofilecont</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lbaselib.o(i.dofilecont))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dofilecont
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_dofile)
</UL>
<P><STRONG><a name="[a7]"></a>finishpcall</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lbaselib.o(i.finishpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = finishpcall &rArr; lua_pushvalue &rArr; index2value
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(i.luaB_pcall)
<LI> lbaselib.o(i.luaB_xpcall)
</UL>
<P><STRONG><a name="[a4]"></a>generic_reader</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lbaselib.o(i.generic_reader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = generic_reader &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_load)
</UL>
<P><STRONG><a name="[a3]"></a>ipairsaux</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lbaselib.o(i.ipairsaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = ipairsaux &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_ipairs)
</UL>
<P><STRONG><a name="[400]"></a>load_aux</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lbaselib.o(i.load_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = load_aux &rArr; lua_settop &rArr; luaF_close &rArr; prepcallclosemth &rArr;  luaD_seterrorobj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[b7]"></a>luaB_assert</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = luaB_assert &rArr; luaB_error &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>luaB_collectgarbage</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, lbaselib.o(i.luaB_collectgarbage))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = luaB_collectgarbage &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushmode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>luaB_dofile</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_dofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = luaB_dofile &rArr; luaL_loadfilex &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dofilecont
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>luaB_error</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = luaB_error &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>luaB_getmetatable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = luaB_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>luaB_ipairs</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_ipairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = luaB_ipairs &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>luaB_load</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, lbaselib.o(i.luaB_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = luaB_load &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>luaB_loadfile</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_loadfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = luaB_loadfile &rArr; luaL_loadfilex &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>luaB_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = luaB_next &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(i.luaB_pairs)
<LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>luaB_pairs</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_pairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = luaB_pairs &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>luaB_pcall</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = luaB_pcall &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>luaB_print</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaB_print &rArr; luaL_tolstring &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>luaB_rawequal</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = luaB_rawequal &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>luaB_rawget</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = luaB_rawget &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>luaB_rawlen</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = luaB_rawlen &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>luaB_rawset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = luaB_rawset &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>luaB_select</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = luaB_select &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>luaB_setmetatable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = luaB_setmetatable &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>luaB_tonumber</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lbaselib.o(i.luaB_tonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = luaB_tonumber &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>luaB_tostring</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = luaB_tostring &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>luaB_type</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856<LI>Call Chain = luaB_type &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>luaB_warn</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_warn))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = luaB_warn &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_warning
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>luaB_xpcall</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_xpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = luaB_xpcall &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>pairscont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lbaselib.o(i.pairscont))
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_pairs)
</UL>
<P><STRONG><a name="[409]"></a>pushmode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lbaselib.o(i.pushmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pushmode &rArr; lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[21e]"></a>addk</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, lcode.o(i.addk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_finishset
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringK
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nilK
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolT
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolF
</UL>

<P><STRONG><a name="[2de]"></a>binopr2TM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcode.o(i.binopr2TM))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinK
</UL>

<P><STRONG><a name="[2df]"></a>binopr2op</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcode.o(i.binopr2op))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinK
</UL>

<P><STRONG><a name="[27e]"></a>boolF</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, lcode.o(i.boolF))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = boolF &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
</UL>

<P><STRONG><a name="[27f]"></a>boolT</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, lcode.o(i.boolT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = boolT &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
</UL>

<P><STRONG><a name="[2d3]"></a>codeABRK</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, lcode.o(i.codeABRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = codeABRK &rArr; exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2RK
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
</UL>

<P><STRONG><a name="[2d5]"></a>codeAsBx</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lcode.o(i.codeAsBx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = codeAsBx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_float
</UL>

<P><STRONG><a name="[2d7]"></a>code_loadbool</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lcode.o(i.code_loadbool))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = code_loadbool &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[2d9]"></a>codearith</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, lcode.o(i.codearith))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168<LI>Call Chain = codearith &rArr; codebinNoK &rArr; codebinexpval &rArr; finishbinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinNoK
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinK
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecommutative
</UL>

<P><STRONG><a name="[2dc]"></a>codebinK</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, lcode.o(i.codebinK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = codebinK &rArr; finishbinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binopr2op
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binopr2TM
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>

<P><STRONG><a name="[2dd]"></a>codebinNoK</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lcode.o(i.codebinNoK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = codebinNoK &rArr; codebinexpval &rArr; finishbinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapexps
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>

<P><STRONG><a name="[2e2]"></a>codebinexpval</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, lcode.o(i.codebinexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = codebinexpval &rArr; finishbinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binopr2op
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binopr2TM
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinNoK
</UL>

<P><STRONG><a name="[2e4]"></a>codebini</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, lcode.o(i.codebini))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = codebini &rArr; finishbinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecommutative
</UL>

<P><STRONG><a name="[2e5]"></a>codebitwise</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, lcode.o(i.codebitwise))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168<LI>Call Chain = codebitwise &rArr; codebinNoK &rArr; codebinexpval &rArr; finishbinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapexps
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinNoK
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinK
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2e8]"></a>codecommutative</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lcode.o(i.codecommutative))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = codecommutative &rArr; codearith &rArr; codebinNoK &rArr; codebinexpval &rArr; finishbinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapexps
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCint
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebini
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2ea]"></a>codeconcat</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, lcode.o(i.codeconcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = codeconcat &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;previousinstruction
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2ee]"></a>codeeq</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, lcode.o(i.codeeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = codeeq &rArr; exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapexps
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCnumber
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2RK
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2f2]"></a>codeextraarg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcode.o(i.codeextraarg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = codeextraarg &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
</UL>

<P><STRONG><a name="[2f6]"></a>codenot</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lcode.o(i.codenot))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = codenot &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
</UL>

<P><STRONG><a name="[2fa]"></a>codeorder</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, lcode.o(i.codeorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = codeorder &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCnumber
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binopr2op
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2fb]"></a>codesJ</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lcode.o(i.codesJ))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = codesJ &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
</UL>

<P><STRONG><a name="[2fc]"></a>codeunexpval</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lcode.o(i.codeunexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = codeunexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
</UL>

<P><STRONG><a name="[2f1]"></a>condjump</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, lcode.o(i.condjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = condjump &rArr; luaK_jump &rArr; codesJ &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
</UL>

<P><STRONG><a name="[45d]"></a>const2exp</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, lcode.o(i.const2exp))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
</UL>

<P><STRONG><a name="[45c]"></a>const2val</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcode.o(i.const2val))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2const
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
</UL>

<P><STRONG><a name="[306]"></a>constfolding</STRONG> (Thumb, 160 bytes, Stack size 88 bytes, lcode.o(i.constfolding))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = constfolding &rArr; luaO_rawarith &rArr; numarith &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2f8]"></a>discharge2anyreg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcode.o(i.discharge2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = discharge2anyreg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[322]"></a>discharge2reg</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lcode.o(i.discharge2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2K
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_float
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>

<P><STRONG><a name="[2d4]"></a>exp2RK</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcode.o(i.exp2RK))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = exp2RK &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeABRK
</UL>

<P><STRONG><a name="[34a]"></a>exp2reg</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lcode.o(i.exp2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>

<P><STRONG><a name="[464]"></a>finaltarget</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, lcode.o(i.finaltarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finaltarget
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_finish
</UL>

<P><STRONG><a name="[36b]"></a>finishbinexpneg</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, lcode.o(i.finishbinexpneg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112<LI>Call Chain = finishbinexpneg &rArr; finishbinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isKint
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitsC
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[2e0]"></a>finishbinexpval</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, lcode.o(i.finishbinexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = finishbinexpval &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpneg
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebini
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinK
</UL>

<P><STRONG><a name="[466]"></a>fitsBx</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lcode.o(i.fitsBx))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_float
</UL>

<P><STRONG><a name="[36d]"></a>fitsC</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lcode.o(i.fitsC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fitsC
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCnumber
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCint
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpneg
</UL>

<P><STRONG><a name="[370]"></a>fixjump</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lcode.o(i.fixjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_finish
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>

<P><STRONG><a name="[2ec]"></a>freeexp</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lcode.o(i.freeexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = freeexp &rArr; freereg &rArr; luaY_nvarstack &rArr; reglevel
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeunexpval
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeconcat
</UL>

<P><STRONG><a name="[2f0]"></a>freeexps</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lcode.o(i.freeexps))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = freeexps &rArr; freeregs &rArr; freereg &rArr; luaY_nvarstack &rArr; reglevel
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeregs
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
</UL>

<P><STRONG><a name="[380]"></a>freereg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcode.o(i.freereg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = freereg &rArr; luaY_nvarstack &rArr; reglevel
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeregs
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>

<P><STRONG><a name="[381]"></a>freeregs</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcode.o(i.freeregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = freeregs &rArr; freereg &rArr; luaY_nvarstack &rArr; reglevel
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
</UL>

<P><STRONG><a name="[45b]"></a>getjump</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcode.o(i.getjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
</UL>

<P><STRONG><a name="[4ba]"></a>getjumpcontrol</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcode.o(i.getjumpcontrol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
</UL>

<P><STRONG><a name="[3d0]"></a>isCint</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcode.o(i.isCint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isCint
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isKint
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
</UL>

<P><STRONG><a name="[36c]"></a>isKint</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcode.o(i.isKint))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSCint
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCint
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpneg
</UL>

<P><STRONG><a name="[468]"></a>isKstr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lcode.o(i.isKstr))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
</UL>

<P><STRONG><a name="[2e9]"></a>isSCint</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcode.o(i.isSCint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = isSCint &rArr; fitsC
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isKint
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitsC
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecommutative
</UL>

<P><STRONG><a name="[2ef]"></a>isSCnumber</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lcode.o(i.isSCnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = isSCnumber &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitsC
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
</UL>

<P><STRONG><a name="[3d1]"></a>jumponcond</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lcode.o(i.jumponcond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removelastinstruction
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
</UL>

<P><STRONG><a name="[325]"></a>luaK_codek</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcode.o(i.luaK_codek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_float
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[2db]"></a>luaK_exp2K</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lcode.o(i.luaK_exp2K))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = luaK_exp2K &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringK
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nilK
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolT
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolF
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2RK
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>

<P><STRONG><a name="[326]"></a>luaK_float</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lcode.o(i.luaK_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitsBx
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeAsBx
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[460]"></a>luaK_intK</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, lcode.o(i.luaK_intK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
</UL>

<P><STRONG><a name="[461]"></a>luaK_numberK</STRONG> (Thumb, 156 bytes, Stack size 88 bytes, lcode.o(i.luaK_numberK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_float
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
</UL>

<P><STRONG><a name="[34c]"></a>need_value</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcode.o(i.need_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = need_value &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[2f7]"></a>negatecondition</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcode.o(i.negatecondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = negatecondition &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[45f]"></a>nilK</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, lcode.o(i.nilK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = nilK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
</UL>

<P><STRONG><a name="[34e]"></a>patchlistaux</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lcode.o(i.patchlistaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[4db]"></a>patchtestreg</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lcode.o(i.patchtestreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = patchtestreg &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>

<P><STRONG><a name="[2eb]"></a>previousinstruction</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lcode.o(i.previousinstruction))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeconcat
</UL>

<P><STRONG><a name="[3d2]"></a>removelastinstruction</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcode.o(i.removelastinstruction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = removelastinstruction &rArr; removelastlineinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removelastlineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>

<P><STRONG><a name="[465]"></a>removelastlineinfo</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lcode.o(i.removelastlineinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = removelastlineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removelastinstruction
</UL>

<P><STRONG><a name="[2f9]"></a>removevalues</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcode.o(i.removevalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = removevalues &rArr; patchtestreg &rArr; getjumpcontrol
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[45a]"></a>savelineinfo</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lcode.o(i.savelineinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>

<P><STRONG><a name="[324]"></a>str2K</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lcode.o(i.str2K))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = str2K &rArr; stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringK
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[462]"></a>stringK</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lcode.o(i.stringK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2K
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
</UL>

<P><STRONG><a name="[2e1]"></a>swapexps</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, lcode.o(i.swapexps))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = swapexps
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeeq
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecommutative
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebitwise
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinNoK
</UL>

<P><STRONG><a name="[2da]"></a>tonumeral</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcode.o(i.tonumeral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tonumeral
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2const
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecommutative
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codearith
</UL>

<P><STRONG><a name="[307]"></a>validop</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lcode.o(i.validop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = validop &rArr; luaV_tointegerns &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[259]"></a>auxgetinfo</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ldebug.o(i.auxgetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = auxgetinfo &rArr; getfuncname &rArr; funcnamefromcall &rArr; funcnamefromcode &rArr; getobjname &rArr; rkname &rArr; rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfuncname
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcurrentline
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[26c]"></a>basicgetobjname</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ldebug.o(i.basicgetobjname))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findsetreg
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basicgetobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rname
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEnv
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basicgetobjname
</UL>

<P><STRONG><a name="[292]"></a>changedline</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ldebug.o(i.changedline))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = changedline &rArr; luaG_getfuncline &rArr; getbaseline
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_getfuncline
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
</UL>

<P><STRONG><a name="[2fd]"></a>collectvalidlines</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, ldebug.o(i.collectvalidlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = collectvalidlines &rArr; luaH_new &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextline
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[391]"></a>currentpc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ldebug.o(i.currentpc))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_findlocal
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcurrentline
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcall
</UL>

<P><STRONG><a name="[36a]"></a>filterpc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ldebug.o(i.filterpc))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findsetreg
</UL>

<P><STRONG><a name="[26e]"></a>findsetreg</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, ldebug.o(i.findsetreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = findsetreg
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterpc
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basicgetobjname
</UL>

<P><STRONG><a name="[442]"></a>findvararg</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ldebug.o(i.findvararg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = findvararg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_findlocal
</UL>

<P><STRONG><a name="[379]"></a>formatvarinfo</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ldebug.o(i.formatvarinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = formatvarinfo &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_callerror
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>

<P><STRONG><a name="[25a]"></a>funcinfo</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ldebug.o(i.funcinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = funcinfo &rArr; luaO_chunkid
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[390]"></a>funcnamefromcall</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ldebug.o(i.funcnamefromcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = funcnamefromcall &rArr; funcnamefromcode &rArr; getobjname &rArr; rkname &rArr; rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_callerror
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfuncname
</UL>

<P><STRONG><a name="[392]"></a>funcnamefromcode</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ldebug.o(i.funcnamefromcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = funcnamefromcode &rArr; getobjname &rArr; rkname &rArr; rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcall
</UL>

<P><STRONG><a name="[444]"></a>getbaseline</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ldebug.o(i.getbaseline))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getbaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_getfuncline
</UL>

<P><STRONG><a name="[25b]"></a>getcurrentline</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ldebug.o(i.getcurrentline))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = getcurrentline &rArr; luaG_getfuncline &rArr; getbaseline
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_getfuncline
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[25c]"></a>getfuncname</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ldebug.o(i.getfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = getfuncname &rArr; funcnamefromcall &rArr; funcnamefromcode &rArr; getobjname &rArr; rkname &rArr; rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcall
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[393]"></a>getobjname</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, ldebug.o(i.getobjname))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = getobjname &rArr; rkname &rArr; rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rname
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rkname
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEnv
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basicgetobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
</UL>

<P><STRONG><a name="[3af]"></a>getupvalname</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ldebug.o(i.getupvalname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getupvalname
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>

<P><STRONG><a name="[53c]"></a>instack</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ldebug.o(i.instack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = instack
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>

<P><STRONG><a name="[3ab]"></a>isEnv</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ldebug.o(i.isEnv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = isEnv &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basicgetobjname
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[270]"></a>kname</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ldebug.o(i.kname))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kname
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rkname
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basicgetobjname
</UL>

<P><STRONG><a name="[2ff]"></a>nextline</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ldebug.o(i.nextline))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nextline &rArr; luaG_getfuncline &rArr; getbaseline
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_getfuncline
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
</UL>

<P><STRONG><a name="[3ad]"></a>rkname</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ldebug.o(i.rkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rkname &rArr; rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rname
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[3ac]"></a>rname</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, ldebug.o(i.rname))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basicgetobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rkname
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[43e]"></a>typeerror</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, ldebug.o(i.typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_callerror
</UL>

<P><STRONG><a name="[26f]"></a>upvalname</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ldebug.o(i.upvalname))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEnv
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalname
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basicgetobjname
</UL>

<P><STRONG><a name="[43d]"></a>varinfo</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ldebug.o(i.varinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = varinfo &rArr; getobjname &rArr; rkname &rArr; rname &rArr; basicgetobjname &rArr;  basicgetobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instack
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalname
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatvarinfo
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_callerror
</UL>

<P><STRONG><a name="[28d]"></a>ccall</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ldo.o(i.ccall))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_checkcstack
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[2b7]"></a>checkmode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ldo.o(i.checkmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = checkmode &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[a8]"></a>closepaux</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ldo.o(i.closepaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = closepaux &rArr; luaF_close &rArr; prepcallclosemth &rArr;  luaD_seterrorobj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.luaD_closeprotected)
</UL>
<P><STRONG><a name="[42c]"></a>correctstack</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ldo.o(i.correctstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = correctstack
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>

<P><STRONG><a name="[a9]"></a>f_parser</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ldo.o(i.f_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2840<LI>Call Chain = f_parser &rArr; luaY_parser &rArr; mainfunc &rArr; statlist &rArr; statement &rArr; repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.luaD_protectedparser)
</UL>
<P><STRONG><a name="[422]"></a>moveresults</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, ldo.o(i.moveresults))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = moveresults &rArr; rethook &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rethook
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>

<P><STRONG><a name="[423]"></a>precallC</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, ldo.o(i.precallC))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = precallC &rArr; prepCallInfo &rArr; luaE_extendCI &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepCallInfo
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[424]"></a>prepCallInfo</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ldo.o(i.prepCallInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = prepCallInfo &rArr; luaE_extendCI &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precallC
</UL>

<P><STRONG><a name="[42a]"></a>relstack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ldo.o(i.relstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = relstack
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>

<P><STRONG><a name="[421]"></a>rethook</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ldo.o(i.rethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rethook &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveresults
</UL>

<P><STRONG><a name="[42d]"></a>stackinuse</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ldo.o(i.stackinuse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stackinuse
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[425]"></a>tryfuncTM</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ldo.o(i.tryfuncTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tryfuncTM &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_callerror
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[32a]"></a>dumpBlock</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ldump.o(i.dumpBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpNumber
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpInteger
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpHeader
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpDebug
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpCode
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpByte
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpString
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpSize
</UL>

<P><STRONG><a name="[329]"></a>dumpByte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ldump.o(i.dumpByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dumpByte &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpHeader
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpFunction
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpConstants
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpUpvalues
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>

<P><STRONG><a name="[32b]"></a>dumpCode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ldump.o(i.dumpCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dumpCode &rArr; dumpInt &rArr; dumpSize &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpInt
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpFunction
</UL>

<P><STRONG><a name="[32d]"></a>dumpConstants</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ldump.o(i.dumpConstants))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dumpConstants &rArr; dumpString &rArr; dumpSize &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpNumber
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpInteger
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpInt
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpByte
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpString
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpFunction
</UL>

<P><STRONG><a name="[331]"></a>dumpDebug</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, ldump.o(i.dumpDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dumpDebug &rArr; dumpString &rArr; dumpSize &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpInt
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpBlock
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpString
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpFunction
</UL>

<P><STRONG><a name="[332]"></a>dumpFunction</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ldump.o(i.dumpFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dumpFunction &rArr; dumpConstants &rArr; dumpString &rArr; dumpSize &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpInt
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpDebug
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpConstants
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpCode
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpByte
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpUpvalues
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpString
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpProtos
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpProtos
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>

<P><STRONG><a name="[335]"></a>dumpHeader</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ldump.o(i.dumpHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dumpHeader &rArr; dumpNumber &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpNumber
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpInteger
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpByte
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>

<P><STRONG><a name="[32c]"></a>dumpInt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ldump.o(i.dumpInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dumpInt &rArr; dumpSize &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpSize
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpFunction
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpDebug
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpConstants
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpCode
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpUpvalues
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpProtos
</UL>

<P><STRONG><a name="[32f]"></a>dumpInteger</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ldump.o(i.dumpInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dumpInteger &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpHeader
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpConstants
</UL>

<P><STRONG><a name="[32e]"></a>dumpNumber</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ldump.o(i.dumpNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dumpNumber &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpHeader
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpConstants
</UL>

<P><STRONG><a name="[334]"></a>dumpProtos</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ldump.o(i.dumpProtos))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = dumpProtos &rArr;  dumpFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpInt
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpFunction
</UL>

<P><STRONG><a name="[336]"></a>dumpSize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ldump.o(i.dumpSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dumpSize &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpInt
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpString
</UL>

<P><STRONG><a name="[330]"></a>dumpString</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ldump.o(i.dumpString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dumpString &rArr; dumpSize &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpBlock
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpSize
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpFunction
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpDebug
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpConstants
</UL>

<P><STRONG><a name="[333]"></a>dumpUpvalues</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ldump.o(i.dumpUpvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dumpUpvalues &rArr; dumpInt &rArr; dumpSize &rArr; dumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpInt
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpFunction
</UL>

<P><STRONG><a name="[289]"></a>callclosemethod</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lfunc.o(i.callclosemethod))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = callclosemethod &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepcallclosemth
</UL>

<P><STRONG><a name="[2ac]"></a>checkclosemth</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lfunc.o(i.checkclosemth))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = checkclosemth &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_findlocal
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newtbcupval
</UL>

<P><STRONG><a name="[438]"></a>newupval</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lfunc.o(i.newupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = newupval &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
</UL>

<P><STRONG><a name="[435]"></a>poptbclist</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lfunc.o(i.poptbclist))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>

<P><STRONG><a name="[436]"></a>prepcallclosemth</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lfunc.o(i.prepcallclosemth))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + In Cycle
<LI>Call Chain = prepcallclosemth &rArr;  luaD_seterrorobj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_seterrorobj
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callclosemethod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>

<P><STRONG><a name="[125]"></a>GCTM</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, lgc.o(i.GCTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = GCTM &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_warnerror
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udata2finalize
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callallpendingfinalizers
</UL>

<P><STRONG><a name="[246]"></a>atomic</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, lgc.o(i.atomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_clearcache
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remarkupvals
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbyvalues
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbykeys
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;youngcollection
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepgenfull
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>

<P><STRONG><a name="[251]"></a>atomic2gen</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lgc.o(i.atomic2gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = atomic2gen &rArr; sweep2old &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweep2old
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleargraylists
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepgenfull
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>

<P><STRONG><a name="[286]"></a>callallpendingfinalizers</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lgc.o(i.callallpendingfinalizers))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = callallpendingfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
</UL>

<P><STRONG><a name="[29d]"></a>checkSizes</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lgc.o(i.checkSizes))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = checkSizes &rArr; luaS_resize &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
</UL>

<P><STRONG><a name="[314]"></a>checkpointer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lgc.o(i.checkpointer))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctpointers
</UL>

<P><STRONG><a name="[24f]"></a>clearbykeys</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lgc.o(i.clearbykeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clearbykeys &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkey
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[24c]"></a>clearbyvalues</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, lgc.o(i.clearbyvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clearbyvalues &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkey
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[252]"></a>cleargraylists</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lgc.o(i.cleargraylists))
<BR><BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic2gen
</UL>

<P><STRONG><a name="[2c4]"></a>clearkey</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lgc.o(i.clearkey))
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbyvalues
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbykeys
</UL>

<P><STRONG><a name="[24b]"></a>convergeephemerons</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lgc.o(i.convergeephemerons))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[310]"></a>correctgraylist</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lgc.o(i.correctgraylist))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = correctgraylist
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgclist
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctgraylists
</UL>

<P><STRONG><a name="[312]"></a>correctgraylists</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lgc.o(i.correctgraylists))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = correctgraylists &rArr; correctgraylist
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctgraylist
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
</UL>

<P><STRONG><a name="[313]"></a>correctpointers</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lgc.o(i.correctpointers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = correctpointers
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpointer
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
</UL>

<P><STRONG><a name="[320]"></a>deletelist</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lgc.o(i.deletelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = deletelist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
</UL>

<P><STRONG><a name="[97]"></a>dothecall</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lgc.o(i.dothecall))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = dothecall &rArr; luaD_callnoyield &rArr; ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lgc.o(i.GCTM)
</UL>
<P><STRONG><a name="[339]"></a>entergen</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lgc.o(i.entergen))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setminordebt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic2gen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
</UL>

<P><STRONG><a name="[33c]"></a>enterinc</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lgc.o(i.enterinc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enterinc
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepgenfull
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
</UL>

<P><STRONG><a name="[33e]"></a>entersweep</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lgc.o(i.entersweep))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = entersweep &rArr; sweeptolive &rArr; sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeptolive
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepgenfull
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullinc
</UL>

<P><STRONG><a name="[51a]"></a>findlast</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lgc.o(i.findlast))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
</UL>

<P><STRONG><a name="[254]"></a>finishgencycle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lgc.o(i.finishgencycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + In Cycle
<LI>Call Chain = finishgencycle &rArr;  callallpendingfinalizers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctgraylists
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSizes
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callallpendingfinalizers
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;youngcollection
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic2gen
</UL>

<P><STRONG><a name="[321]"></a>freeobj</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, lgc.o(i.freeobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_remove
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeupval
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepgen
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweep2old
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deletelist
</UL>

<P><STRONG><a name="[384]"></a>freeupval</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lgc.o(i.freeupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = freeupval &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_unlinkupval
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[389]"></a>fullgen</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lgc.o(i.fullgen))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterinc
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genstep
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[38a]"></a>fullinc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lgc.o(i.fullinc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fullinc &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[398]"></a>genlink</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lgc.o(i.genlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = genlink
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkgclist_
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgclist
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseudata
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
</UL>

<P><STRONG><a name="[39a]"></a>genstep</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lgc.o(i.genstep))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;youngcollection
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepgenfull
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setminordebt
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>

<P><STRONG><a name="[311]"></a>getgclist</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lgc.o(i.getgclist))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genlink
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctgraylist
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
</UL>

<P><STRONG><a name="[3c1]"></a>incstep</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lgc.o(i.incstep))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = incstep &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>

<P><STRONG><a name="[2c3]"></a>iscleared</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lgc.o(i.iscleared))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbyvalues
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbykeys
</UL>

<P><STRONG><a name="[399]"></a>linkgclist_</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lgc.o(i.linkgclist_))
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweep2old
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genlink
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
</UL>

<P><STRONG><a name="[24e]"></a>markbeingfnz</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lgc.o(i.markbeingfnz))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = markbeingfnz &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[248]"></a>markmt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lgc.o(i.markmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = markmt &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[4b0]"></a>markold</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lgc.o(i.markold))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = markold &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;youngcollection
</UL>

<P><STRONG><a name="[249]"></a>propagateall</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lgc.o(i.propagateall))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[4dd]"></a>propagatemark</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lgc.o(i.propagatemark))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseudata
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseLclosure
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCclosure
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgclist
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
</UL>

<P><STRONG><a name="[247]"></a>reallymarkobject</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, lgc.o(i.reallymarkobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkgclist_
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgclist
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseudata
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseLclosure
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseCclosure
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remarkupvals
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markold
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>

<P><STRONG><a name="[24a]"></a>remarkupvals</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lgc.o(i.remarkupvals))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = remarkupvals &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[516]"></a>restartcollection</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lgc.o(i.restartcollection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = restartcollection &rArr; markmt &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleargraylists
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[518]"></a>runafewfinalizers</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lgc.o(i.runafewfinalizers))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = runafewfinalizers &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[24d]"></a>separatetobefnz</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lgc.o(i.separatetobefnz))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = separatetobefnz
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlast
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[33b]"></a>setminordebt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lgc.o(i.setminordebt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setminordebt &rArr; luaE_setdebt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepgenfull
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genstep
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entergen
</UL>

<P><STRONG><a name="[38b]"></a>setpause</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lgc.o(i.setpause))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setpause &rArr; luaE_setdebt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepgenfull
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incstep
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genstep
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullinc
</UL>

<P><STRONG><a name="[3c2]"></a>singlestep</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, lgc.o(i.singlestep))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepstep
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restartcollection
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkSizes
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incstep
</UL>

<P><STRONG><a name="[39b]"></a>stepgenfull</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lgc.o(i.stepgenfull))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = stepgenfull &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setminordebt
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterinc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic2gen
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genstep
</UL>

<P><STRONG><a name="[253]"></a>sweep2old</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lgc.o(i.sweep2old))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sweep2old &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkgclist_
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic2gen
</UL>

<P><STRONG><a name="[529]"></a>sweepgen</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lgc.o(i.sweepgen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sweepgen &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;youngcollection
</UL>

<P><STRONG><a name="[52a]"></a>sweeplist</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, lgc.o(i.sweeplist))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeptolive
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepstep
</UL>

<P><STRONG><a name="[51c]"></a>sweepstep</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lgc.o(i.sweepstep))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sweepstep &rArr; sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[33f]"></a>sweeptolive</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lgc.o(i.sweeptolive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sweeptolive &rArr; sweeplist &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
</UL>

<P><STRONG><a name="[4e1]"></a>traverseCclosure</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lgc.o(i.traverseCclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = traverseCclosure &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[4e0]"></a>traverseLclosure</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lgc.o(i.traverseLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = traverseLclosure &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[30d]"></a>traverseephemeron</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, lgc.o(i.traverseephemeron))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkgclist_
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genlink
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkey
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
</UL>

<P><STRONG><a name="[4e2]"></a>traverseproto</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, lgc.o(i.traverseproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = traverseproto &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[52b]"></a>traversestrongtable</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, lgc.o(i.traversestrongtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = traversestrongtable &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genlink
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkey
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[4de]"></a>traversetable</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, lgc.o(i.traversetable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkgclist_
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[4e3]"></a>traversethread</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lgc.o(i.traversethread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = traversethread &rArr;  luaD_shrinkstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkgclist_
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[4df]"></a>traverseudata</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lgc.o(i.traverseudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = traverseudata &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genlink
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[52c]"></a>traverseweakvalue</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lgc.o(i.traverseweakvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = traverseweakvalue &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkgclist_
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkey
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[126]"></a>udata2finalize</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lgc.o(i.udata2finalize))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[33d]"></a>whitelist</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lgc.o(i.whitelist))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterinc
</UL>

<P><STRONG><a name="[39c]"></a>youngcollection</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lgc.o(i.youngcollection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = youngcollection &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepgen
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markold
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genstep
</UL>

<P><STRONG><a name="[2a6]"></a>check_next1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, llex.o(i.check_next1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_next1 &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[2a8]"></a>check_next2</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llex.o(i.check_next2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = check_next2 &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[347]"></a>esccheck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llex.o(i.esccheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>

<P><STRONG><a name="[3a5]"></a>gethexa</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, llex.o(i.gethexa))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readhexaesc
</UL>

<P><STRONG><a name="[3c0]"></a>inclinenumber</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, llex.o(i.inclinenumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = inclinenumber &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[348]"></a>lexerror</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, llex.o(i.lexerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>

<P><STRONG><a name="[3ea]"></a>llex</STRONG> (Thumb, 1124 bytes, Stack size 16 bytes, llex.o(i.llex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next1
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
</UL>

<P><STRONG><a name="[3ec]"></a>read_long_string</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, llex.o(i.read_long_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = read_long_string &rArr; skip_sep &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[3ee]"></a>read_numeral</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, llex.o(i.read_numeral))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = read_numeral &rArr; check_next2 &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[3ed]"></a>read_string</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, llex.o(i.read_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readhexaesc
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[50f]"></a>readdecesc</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, llex.o(i.readdecesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = readdecesc &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[50d]"></a>readhexaesc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llex.o(i.readhexaesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = readhexaesc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[510]"></a>readutf8esc</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, llex.o(i.readutf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
</UL>

<P><STRONG><a name="[2a9]"></a>save</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, llex.o(i.save))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8esc
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txtToken
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
</UL>

<P><STRONG><a name="[3eb]"></a>skip_sep</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, llex.o(i.skip_sep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = skip_sep &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[3e9]"></a>txtToken</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, llex.o(i.txtToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + In Cycle
<LI>Call Chain = txtToken &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>

<P><STRONG><a name="[50e]"></a>utf8esc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, llex.o(i.utf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[486]"></a>tryagain</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lmem.o(i.tryagain))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tryagain &rArr; luaC_fullgc &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
</UL>

<P><STRONG><a name="[22e]"></a>addnum2buff</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lobject.o(i.addnum2buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = addnum2buff &rArr; getbuff &rArr; clearbuff &rArr; pushstr &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tostringbuff
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>

<P><STRONG><a name="[234]"></a>addstr2buff</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lobject.o(i.addstr2buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = addstr2buff &rArr; getbuff &rArr; clearbuff &rArr; pushstr &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbuff
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbuff
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>

<P><STRONG><a name="[235]"></a>clearbuff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lobject.o(i.clearbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = clearbuff &rArr; pushstr &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbuff
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addstr2buff
</UL>

<P><STRONG><a name="[22f]"></a>getbuff</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lobject.o(i.getbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = getbuff &rArr; clearbuff &rArr; pushstr &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addstr2buff
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addnum2buff
</UL>

<P><STRONG><a name="[3c6]"></a>intarith</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, lobject.o(i.intarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = intarith &rArr; luaV_mod &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
</UL>

<P><STRONG><a name="[3db]"></a>isneg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lobject.o(i.isneg))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
</UL>

<P><STRONG><a name="[3d6]"></a>l_str2d</STRONG> (Thumb, 140 bytes, Stack size 232 bytes, lobject.o(i.l_str2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2dloc
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[3d8]"></a>l_str2dloc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lobject.o(i.l_str2dloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>

<P><STRONG><a name="[3da]"></a>l_str2int</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, lobject.o(i.l_str2int))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l_str2int
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isneg
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[48a]"></a>numarith</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, lobject.o(i.numarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = numarith &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_modf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
</UL>

<P><STRONG><a name="[236]"></a>pushstr</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lobject.o(i.pushstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + In Cycle
<LI>Call Chain = pushstr &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbuff
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addstr2buff
</UL>

<P><STRONG><a name="[230]"></a>tostringbuff</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lobject.o(i.tostringbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tostringbuff &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addnum2buff
</UL>

<P><STRONG><a name="[231]"></a>addprototype</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, lparser.o(i.addprototype))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = addprototype &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[237]"></a>adjust_assign</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lparser.o(i.adjust_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[23c]"></a>adjustlocalvars</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lparser.o(i.adjustlocalvars))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = adjustlocalvars &rArr; registerlocalvar &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalvardesc
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[240]"></a>allocupvalue</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lparser.o(i.allocupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = allocupvalue &rArr; checklimit &rArr; errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
</UL>

<P><STRONG><a name="[271]"></a>block</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, lparser.o(i.block))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + In Cycle
<LI>Call Chain = block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[3e1]"></a>block_follow</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lparser.o(i.block_follow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[275]"></a>body</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, lparser.o(i.body))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + In Cycle
<LI>Call Chain = body &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
</UL>

<P><STRONG><a name="[281]"></a>breakstat</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lparser.o(i.breakstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = breakstat &rArr; luaK_jump &rArr; codesJ &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newgotoentry
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[294]"></a>check</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lparser.o(i.check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = check &rArr; error_expected &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>

<P><STRONG><a name="[2a0]"></a>check_conflict</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, lparser.o(i.check_conflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = check_conflict &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
</UL>

<P><STRONG><a name="[27b]"></a>check_match</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, lparser.o(i.check_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = check_match &rArr; testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[2aa]"></a>check_readonly</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lparser.o(i.check_readonly))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = check_readonly &rArr; luaK_semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalvardesc
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
</UL>

<P><STRONG><a name="[241]"></a>checklimit</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lparser.o(i.checklimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = checklimit &rArr; errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocupvalue
</UL>

<P><STRONG><a name="[277]"></a>checknext</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lparser.o(i.checknext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = checknext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalattribute
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[2ba]"></a>checkrepeated</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lparser.o(i.checkrepeated))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = checkrepeated &rArr; luaK_semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[2bf]"></a>checktoclose</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lparser.o(i.checktoclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = checktoclose &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reglevel
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marktobeclosed
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
</UL>

<P><STRONG><a name="[27d]"></a>close_func</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lparser.o(i.close_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = close_func &rArr; leaveblock &rArr; createlabel &rArr; solvegotos &rArr; solvegoto &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_finish
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_shrinkvector_
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[2cf]"></a>closelistfield</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lparser.o(i.closelistfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = closelistfield &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[27c]"></a>codeclosure</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lparser.o(i.codeclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = codeclosure &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[2f3]"></a>codename</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lparser.o(i.codename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = codename &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[2f5]"></a>codestring</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lparser.o(i.codestring))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codename
</UL>

<P><STRONG><a name="[301]"></a>cond</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lparser.o(i.cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 2504<LI>Call Chain = cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
</UL>

<P><STRONG><a name="[309]"></a>constructor</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, lparser.o(i.constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_settablesize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lastlistfield
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closelistfield
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
</UL>

<P><STRONG><a name="[318]"></a>createlabel</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, lparser.o(i.createlabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = createlabel &rArr; solvegotos &rArr; solvegoto &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solvegotos
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[272]"></a>enterblock</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lparser.o(i.enterblock))
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[295]"></a>error_expected</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lparser.o(i.error_expected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = error_expected &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>

<P><STRONG><a name="[2b4]"></a>errorlimit</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, lparser.o(i.errorlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>

<P><STRONG><a name="[349]"></a>exp1</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, lparser.o(i.exp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 2504<LI>Call Chain = exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[34f]"></a>explist</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(i.explist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + In Cycle
<LI>Call Chain = explist &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[302]"></a>expr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lparser.o(i.expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
</UL>

<P><STRONG><a name="[351]"></a>exprstat</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lparser.o(i.exprstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488<LI>Call Chain = exprstat &rArr; restassign &rArr;  restassign (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[30a]"></a>field</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lparser.o(i.field))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[35f]"></a>fieldsel</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, lparser.o(i.fieldsel))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = fieldsel &rArr; luaK_indexed &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codename
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
</UL>

<P><STRONG><a name="[2bb]"></a>findlabel</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lparser.o(i.findlabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = findlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
</UL>

<P><STRONG><a name="[36f]"></a>fixforjump</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lparser.o(i.fixforjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = fixforjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[372]"></a>forbody</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, lparser.o(i.forbody))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = forbody &rArr; block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixforjump
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[377]"></a>forlist</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, lparser.o(i.forlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = forlist &rArr; adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marktobeclosed
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[37a]"></a>fornum</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, lparser.o(i.fornum))
<BR><BR>[Stack]<UL><LI>Max Depth = 2536<LI>Call Chain = fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[37c]"></a>forstat</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lparser.o(i.forstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2576<LI>Call Chain = forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[38c]"></a>funcargs</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, lparser.o(i.funcargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 2320<LI>Call Chain = funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[38e]"></a>funcname</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lparser.o(i.funcname))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = funcname &rArr; singlevar &rArr; luaK_indexed &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
</UL>

<P><STRONG><a name="[394]"></a>funcstat</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, lparser.o(i.funcstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = funcstat &rArr; body &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_readonly
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[528]"></a>getbinopr</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, lparser.o(i.getbinopr))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[3a7]"></a>getlocalattribute</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lparser.o(i.getlocalattribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = getlocalattribute &rArr; testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
</UL>

<P><STRONG><a name="[23e]"></a>getlocalvardesc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lparser.o(i.getlocalvardesc))
<BR><BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchvar
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reglevel
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localdebuginfo
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpscopeerror
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_var
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_readonly
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>

<P><STRONG><a name="[527]"></a>getunopr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lparser.o(i.getunopr))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[3b7]"></a>gotostat</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, lparser.o(i.gotostat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = gotostat &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reglevel
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newgotoentry
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[3be]"></a>ifstat</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lparser.o(i.ifstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2568<LI>Call Chain = ifstat &rArr; test_then_block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[2e7]"></a>init_exp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lparser.o(i.init_exp))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchvar
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeclosure
</UL>

<P><STRONG><a name="[3c5]"></a>init_var</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lparser.o(i.init_var))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_var
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalvardesc
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchvar
</UL>

<P><STRONG><a name="[3d3]"></a>jumpscopeerror</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lparser.o(i.jumpscopeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = jumpscopeerror &rArr; luaK_semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalvardesc
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solvegoto
</UL>

<P><STRONG><a name="[3df]"></a>labelstat</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lparser.o(i.labelstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872 + In Cycle
<LI>Call Chain = labelstat &rArr;  statement (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkrepeated
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[30b]"></a>lastlistfield</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lparser.o(i.lastlistfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = lastlistfield &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[274]"></a>leaveblock</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lparser.o(i.leaveblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = leaveblock &rArr; createlabel &rArr; solvegotos &rArr; solvegoto &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevars
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reglevel
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[35d]"></a>listfield</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lparser.o(i.listfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = listfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[402]"></a>localdebuginfo</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lparser.o(i.localdebuginfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = localdebuginfo
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalvardesc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevars
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
</UL>

<P><STRONG><a name="[403]"></a>localfunc</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, lparser.o(i.localfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136<LI>Call Chain = localfunc &rArr; body &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localdebuginfo
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[404]"></a>localstat</STRONG> (Thumb, 220 bytes, Stack size 72 bytes, lparser.o(i.localstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072<LI>Call Chain = localstat &rArr; adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2const
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalvardesc
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalattribute
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktoclose
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[49f]"></a>mainfunc</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lparser.o(i.mainfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 2632<LI>Call Chain = mainfunc &rArr; statlist &rArr; statement &rArr; repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvararg
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[2c0]"></a>marktobeclosed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lparser.o(i.marktobeclosed))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktoclose
</UL>

<P><STRONG><a name="[51e]"></a>markupval</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lparser.o(i.markupval))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[3e3]"></a>movegotosout</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lparser.o(i.movegotosout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = movegotosout &rArr; reglevel
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reglevel
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[279]"></a>new_localvar</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, lparser.o(i.new_localvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = new_localvar &rArr; checklimit &rArr; errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[285]"></a>newgotoentry</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lparser.o(i.newgotoentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = newgotoentry &rArr; newlabelentry &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
</UL>

<P><STRONG><a name="[319]"></a>newlabelentry</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lparser.o(i.newlabelentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = newlabelentry &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newgotoentry
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
</UL>

<P><STRONG><a name="[4bd]"></a>newupvalue</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lparser.o(i.newupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = newupvalue &rArr; allocupvalue &rArr; checklimit &rArr; errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalvardesc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[276]"></a>open_func</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lparser.o(i.open_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = open_func &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[27a]"></a>parlist</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lparser.o(i.parlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = parlist &rArr; setvararg &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvararg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[4dc]"></a>primaryexp</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lparser.o(i.primaryexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064 + In Cycle
<LI>Call Chain = primaryexp &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[35e]"></a>recfield</STRONG> (Thumb, 118 bytes, Stack size 96 bytes, lparser.o(i.recfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + In Cycle
<LI>Call Chain = recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codename
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field
</UL>

<P><STRONG><a name="[23f]"></a>registerlocalvar</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lparser.o(i.registerlocalvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = registerlocalvar &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>

<P><STRONG><a name="[2c1]"></a>reglevel</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lparser.o(i.reglevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reglevel
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalvardesc
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movegotosout
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktoclose
</UL>

<P><STRONG><a name="[3e2]"></a>removevars</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lparser.o(i.removevars))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = removevars &rArr; localdebuginfo
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localdebuginfo
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[514]"></a>repeatstat</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, lparser.o(i.repeatstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2576 + In Cycle
<LI>Call Chain = repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reglevel
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[353]"></a>restassign</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, lparser.o(i.restassign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + In Cycle
<LI>Call Chain = restassign &rArr;  restassign (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCstack
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_readonly
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
</UL>

<P><STRONG><a name="[517]"></a>retstat</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, lparser.o(i.retstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = retstat &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[51f]"></a>searchupvalue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lparser.o(i.searchupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = searchupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[519]"></a>searchvar</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lparser.o(i.searchvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = searchvar &rArr; init_var
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_var
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalvardesc
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[4af]"></a>setvararg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lparser.o(i.setvararg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = setvararg &rArr; luaK_codeABCk &rArr; luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
</UL>

<P><STRONG><a name="[51b]"></a>simpleexp</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, lparser.o(i.simpleexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2392<LI>Call Chain = simpleexp &rArr; suffixedexp &rArr; funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[38f]"></a>singlevar</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, lparser.o(i.singlevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = singlevar &rArr; luaK_indexed &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_float &rArr; luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcname
</UL>

<P><STRONG><a name="[51d]"></a>singlevaraux</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lparser.o(i.singlevaraux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + In Cycle
<LI>Call Chain = singlevaraux &rArr;  singlevaraux (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchvar
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchupvalue
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markupval
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
</UL>

<P><STRONG><a name="[521]"></a>solvegoto</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lparser.o(i.solvegoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = solvegoto &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpscopeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solvegotos
</UL>

<P><STRONG><a name="[31a]"></a>solvegotos</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lparser.o(i.solvegotos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = solvegotos &rArr; solvegoto &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;solvegoto
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
</UL>

<P><STRONG><a name="[3e0]"></a>statement</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, lparser.o(i.statement))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = statement &rArr; repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCstack
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whilestat
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcstat
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakstat
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[273]"></a>statlist</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lparser.o(i.statlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = statlist &rArr; statement &rArr; repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainfunc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[2f4]"></a>str_checkname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lparser.o(i.str_checkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localfunc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalattribute
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codename
</UL>

<P><STRONG><a name="[350]"></a>subexpr</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, lparser.o(i.subexpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456 + In Cycle
<LI>Call Chain = subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCstack
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getunopr
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbinopr
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>

<P><STRONG><a name="[352]"></a>suffixedexp</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, lparser.o(i.suffixedexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360<LI>Call Chain = suffixedexp &rArr; funcargs &rArr; constructor &rArr; field &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primaryexp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codename
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exprstat
</UL>

<P><STRONG><a name="[3bf]"></a>test_then_block</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, lparser.o(i.test_then_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 2544 + In Cycle
<LI>Call Chain = test_then_block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newgotoentry
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
</UL>

<P><STRONG><a name="[2a2]"></a>testnext</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lparser.o(i.testnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; utf8esc &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localstat
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifstat
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocalattribute
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>

<P><STRONG><a name="[3e4]"></a>undefgoto</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lparser.o(i.undefgoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = undefgoto &rArr; luaK_semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[522]"></a>whilestat</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, lparser.o(i.whilestat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552<LI>Call Chain = whilestat &rArr; cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[511]"></a>yindex</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lparser.o(i.yindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + In Cycle
<LI>Call Chain = yindex &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[2ca]"></a>close_state</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lstate.o(i.close_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = close_state &rArr; luaC_freeallobjects &rArr; callallpendingfinalizers &rArr; GCTM &rArr; luaD_pcall &rArr; luaD_shrinkstack &rArr; luaD_reallocstack &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_closeprotected
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[ac]"></a>f_luaopen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lstate.o(i.f_luaopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = f_luaopen &rArr; luaX_init &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_registry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(i.lua_newstate)
</UL>
<P><STRONG><a name="[37f]"></a>freeCI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lstate.o(i.freeCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = freeCI &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>

<P><STRONG><a name="[2ce]"></a>freestack</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lstate.o(i.freestack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = freestack &rArr; freeCI &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeCI
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[355]"></a>init_registry</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lstate.o(i.init_registry))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = init_registry &rArr; luaH_resize &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[4a5]"></a>luai_makeseed</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lstate.o(i.luai_makeseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = luai_makeseed &rArr; luaS_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[4a4]"></a>preinit_thread</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lstate.o(i.preinit_thread))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[354]"></a>stack_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lstate.o(i.stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = stack_init &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[31e]"></a>createstrobj</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lstring.o(i.createstrobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = createstrobj &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
</UL>

<P><STRONG><a name="[3b9]"></a>growstrtab</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lstring.o(i.growstrtab))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + In Cycle
<LI>Call Chain = growstrtab &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
</UL>

<P><STRONG><a name="[3ca]"></a>internshrstr</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, lstring.o(i.internshrstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstrtab
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>

<P><STRONG><a name="[48d]"></a>tablerehash</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, lstring.o(i.tablerehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tablerehash
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[209]"></a>add_s</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, lstrlib.o(i.add_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = add_s &rArr; luaL_addvalue &rArr; prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_onecapture
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[211]"></a>add_value</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, lstrlib.o(i.add_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = add_value &rArr; add_s &rArr; luaL_addvalue &rArr; prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[224]"></a>addlenmod</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lstrlib.o(i.addlenmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = addlenmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[225]"></a>addliteral</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, lstrlib.o(i.addliteral))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = addliteral &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quotefloat
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[226]"></a>addquoted</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, lstrlib.o(i.addquoted))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = addquoted &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[242]"></a>arith</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lstrlib.o(i.arith))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = arith &rArr; trymt &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_arith
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trymt
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonum
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_unm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_sub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_pow
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_mul
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_mod
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_idiv
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_div
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_add
</UL>

<P><STRONG><a name="[d0]"></a>arith_add</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_add &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>arith_div</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_div &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>arith_idiv</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_idiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_idiv &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>arith_mod</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_mod &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>arith_mul</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_mul &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>arith_pow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_pow &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>arith_sub</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_sub &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>arith_unm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lstrlib.o(i.arith_unm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = arith_unm &rArr; arith &rArr; trymt &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[28c]"></a>capture_to_close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lstrlib.o(i.capture_to_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = capture_to_close &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
</UL>

<P><STRONG><a name="[29f]"></a>check_capture</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lstrlib.o(i.check_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = check_capture &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
</UL>

<P><STRONG><a name="[2b2]"></a>checkformat</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lstrlib.o(i.checkformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = checkformat &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get2digits
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[2c2]"></a>classend</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lstrlib.o(i.classend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = classend &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[30f]"></a>copywithendian</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lstrlib.o(i.copywithendian))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copywithendian
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[31b]"></a>createmetatable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lstrlib.o(i.createmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = createmetatable &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
</UL>

<P><STRONG><a name="[3a9]"></a>digit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lstrlib.o(i.digit))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>

<P><STRONG><a name="[337]"></a>end_capture</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lstrlib.o(i.end_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + In Cycle
<LI>Call Chain = end_capture &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capture_to_close
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[2b3]"></a>get2digits</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lstrlib.o(i.get2digits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get2digits
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkformat
</UL>

<P><STRONG><a name="[20d]"></a>get_onecapture</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lstrlib.o(i.get_onecapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = get_onecapture &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[39f]"></a>getdetails</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lstrlib.o(i.getdetails))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = getdetails &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[3a1]"></a>getendpos</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lstrlib.o(i.getendpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = getendpos &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
</UL>

<P><STRONG><a name="[3a3]"></a>getformat</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lstrlib.o(i.getformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = getformat &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[3a8]"></a>getnum</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lstrlib.o(i.getnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getnum
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
</UL>

<P><STRONG><a name="[3aa]"></a>getnumlimit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lstrlib.o(i.getnumlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = getnumlimit &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>

<P><STRONG><a name="[3a0]"></a>getoption</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, lstrlib.o(i.getoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = getoption &rArr; getnumlimit &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
</UL>

<P><STRONG><a name="[dd]"></a>gmatch</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, lstrlib.o(i.gmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = gmatch &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdatauv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelatI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>gmatch_aux</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lstrlib.o(i.gmatch_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = gmatch_aux &rArr; push_captures &rArr; push_onecapture &rArr; get_onecapture &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(i.gmatch)
</UL>
<P><STRONG><a name="[524]"></a>initheader</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lstrlib.o(i.initheader))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[3ef]"></a>lmemfind</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lstrlib.o(i.lmemfind))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lmemfind &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[338]"></a>match</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, lstrlib.o(i.match))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + In Cycle
<LI>Call Chain = match &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbalance
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_capture
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classend
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_capture
</UL>

<P><STRONG><a name="[4b4]"></a>match_capture</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lstrlib.o(i.match_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = match_capture &rArr; check_capture &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_capture
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4b8]"></a>match_class</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, lstrlib.o(i.match_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
</UL>

<P><STRONG><a name="[4b2]"></a>matchbalance</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lstrlib.o(i.matchbalance))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = matchbalance &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4b3]"></a>matchbracketclass</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lstrlib.o(i.matchbracketclass))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = matchbracketclass &rArr; match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4b6]"></a>max_expand</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lstrlib.o(i.max_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = max_expand &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4b7]"></a>min_expand</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lstrlib.o(i.min_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = min_expand &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4be]"></a>nospecials</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lstrlib.o(i.nospecials))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nospecials &rArr; strpbrk
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[4da]"></a>packint</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lstrlib.o(i.packint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = packint &rArr; luaL_prepbuffsize &rArr; prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[3b1]"></a>posrelatI</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, lstrlib.o(i.posrelatI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = posrelatI
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[3b3]"></a>prepstate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lstrlib.o(i.prepstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prepstate
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[213]"></a>push_captures</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lstrlib.o(i.push_captures))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = push_captures &rArr; push_onecapture &rArr; get_onecapture &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[215]"></a>push_onecapture</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lstrlib.o(i.push_onecapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = push_onecapture &rArr; get_onecapture &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_onecapture
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[229]"></a>quotefloat</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, lstrlib.o(i.quotefloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = quotefloat &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[3b6]"></a>reprepstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lstrlib.o(i.reprepstate))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
</UL>

<P><STRONG><a name="[4b5]"></a>singlematch</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lstrlib.o(i.singlematch))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = singlematch &rArr; matchbracketclass &rArr; match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_expand
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[4b1]"></a>start_capture</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lstrlib.o(i.start_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + In Cycle
<LI>Call Chain = start_capture &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[d8]"></a>str_byte</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, lstrlib.o(i.str_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = str_byte &rArr; getendpos &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelatI
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getendpos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>str_char</STRONG> (Thumb, 96 bytes, Stack size 560 bytes, lstrlib.o(i.str_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 2496<LI>Call Chain = str_char &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>str_dump</STRONG> (Thumb, 78 bytes, Stack size 552 bytes, lstrlib.o(i.str_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = str_dump &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>str_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lstrlib.o(i.str_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304<LI>Call Chain = str_find &rArr; str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[523]"></a>str_find_aux</STRONG> (Thumb, 338 bytes, Stack size 336 bytes, lstrlib.o(i.str_find_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelatI
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nospecials
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmemfind
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_match
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find
</UL>

<P><STRONG><a name="[dc]"></a>str_format</STRONG> (Thumb, 770 bytes, Stack size 632 bytes, lstrlib.o(i.str_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 2568<LI>Call Chain = str_format &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getformat
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkformat
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>str_gsub</STRONG> (Thumb, 332 bytes, Stack size 880 bytes, lstrlib.o(i.str_gsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 2840<LI>Call Chain = str_gsub &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reprepstate
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>str_len</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lstrlib.o(i.str_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = str_len &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>str_lower</STRONG> (Thumb, 68 bytes, Stack size 552 bytes, lstrlib.o(i.str_lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = str_lower &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>str_match</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lstrlib.o(i.str_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304<LI>Call Chain = str_match &rArr; str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>str_pack</STRONG> (Thumb, 818 bytes, Stack size 632 bytes, lstrlib.o(i.str_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 2568<LI>Call Chain = str_pack &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packint
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copywithendian
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>str_packsize</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, lstrlib.o(i.str_packsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = str_packsize &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>str_rep</STRONG> (Thumb, 226 bytes, Stack size 568 bytes, lstrlib.o(i.str_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 2512<LI>Call Chain = str_rep &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>str_reverse</STRONG> (Thumb, 70 bytes, Stack size 552 bytes, lstrlib.o(i.str_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = str_reverse &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>str_sub</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lstrlib.o(i.str_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = str_sub &rArr; getendpos &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelatI
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getendpos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>str_unpack</STRONG> (Thumb, 456 bytes, Stack size 80 bytes, lstrlib.o(i.str_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = str_unpack &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelatI
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copywithendian
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>str_upper</STRONG> (Thumb, 68 bytes, Stack size 552 bytes, lstrlib.o(i.str_upper))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = str_upper &rArr; luaL_checklstring &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[243]"></a>tonum</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lstrlib.o(i.tonum))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tonum &rArr; lua_stringtonumber &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>

<P><STRONG><a name="[245]"></a>trymt</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lstrlib.o(i.trymt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = trymt &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith
</UL>

<P><STRONG><a name="[525]"></a>unpackint</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, lstrlib.o(i.unpackint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = unpackint &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[b0]"></a>writer</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lstrlib.o(i.writer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = writer &rArr; luaL_addlstring &rArr; prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(i.str_dump)
</UL>
<P><STRONG><a name="[316]"></a>arrayindex</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ltable.o(i.arrayindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>

<P><STRONG><a name="[450]"></a>binsearch</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ltable.o(i.binsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = binsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
</UL>

<P><STRONG><a name="[513]"></a>computesizes</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, ltable.o(i.computesizes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = computesizes
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[315]"></a>countint</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ltable.o(i.countint))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = countint &rArr; arrayindex
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusehash
</UL>

<P><STRONG><a name="[340]"></a>equalkey</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, ltable.o(i.equalkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = equalkey &rArr; luaS_eqlngstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>

<P><STRONG><a name="[457]"></a>exchangehashpart</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ltable.o(i.exchangehashpart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = exchangehashpart
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>

<P><STRONG><a name="[368]"></a>findindex</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ltable.o(i.findindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
</UL>

<P><STRONG><a name="[382]"></a>freehash</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ltable.o(i.freehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = freehash &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>

<P><STRONG><a name="[452]"></a>getfreepos</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ltable.o(i.getfreepos))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[369]"></a>getgeneric</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ltable.o(i.getgeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = getgeneric &rArr; mainpositionTV &rArr; l_hashfloat &rArr; __hardfp_frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equalkey
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[3bb]"></a>hash_search</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, ltable.o(i.hash_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hash_search &rArr; luaH_getint &rArr; hashint &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
</UL>

<P><STRONG><a name="[3bd]"></a>hashint</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ltable.o(i.hashint))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hashint &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
</UL>

<P><STRONG><a name="[44f]"></a>ispow2realasize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ltable.o(i.ispow2realasize))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
</UL>

<P><STRONG><a name="[3d4]"></a>l_hashfloat</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ltable.o(i.l_hashfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = l_hashfloat &rArr; __hardfp_frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
</UL>

<P><STRONG><a name="[44c]"></a>luaH_newkey</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, ltable.o(i.luaH_newkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + In Cycle
<LI>Call Chain = luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfreepos
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_finishset
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
</UL>

<P><STRONG><a name="[3a4]"></a>mainpositionTV</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, ltable.o(i.mainpositionTV))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mainpositionTV &rArr; l_hashfloat &rArr; __hardfp_frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hashfloat
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashint
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>

<P><STRONG><a name="[512]"></a>numusearray</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, ltable.o(i.numusearray))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = numusearray
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[4bf]"></a>numusehash</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ltable.o(i.numusehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = numusehash &rArr; countint &rArr; arrayindex
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[453]"></a>rehash</STRONG> (Thumb, 114 bytes, Stack size 168 bytes, ltable.o(i.rehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rehash &rArr; luaH_resize &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlimittosize
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusehash
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numusearray
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computesizes
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[458]"></a>reinsert</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, ltable.o(i.reinsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = reinsert &rArr; luaH_set &rArr;  luaH_finishset (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>

<P><STRONG><a name="[456]"></a>setlimittosize</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ltable.o(i.setlimittosize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setlimittosize
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[451]"></a>setnodevector</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ltable.o(i.setnodevector))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + In Cycle
<LI>Call Chain = setnodevector &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>

<P><STRONG><a name="[21c]"></a>addfield</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ltablib.o(i.addfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = addfield &rArr; luaL_addvalue &rArr; prepbuffsize &rArr; newbox &rArr; luaL_setfuncs &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
</UL>

<P><STRONG><a name="[263]"></a>auxsort</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, ltablib.o(i.auxsort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + In Cycle
<LI>Call Chain = auxsort &rArr;  auxsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_randomizePivot
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choosePivot
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[2af]"></a>checkfield</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ltablib.o(i.checkfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = checkfield &rArr; lua_pushstring &rArr; luaC_step &rArr; genstep &rArr; fullgen &rArr; entergen &rArr; luaC_runtilstate &rArr; singlestep &rArr; atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[2bc]"></a>checktab</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ltablib.o(i.checktab))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = checktab &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
</UL>

<P><STRONG><a name="[266]"></a>choosePivot</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ltablib.o(i.choosePivot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = choosePivot
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[268]"></a>l_randomizePivot</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, ltablib.o(i.l_randomizePivot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l_randomizePivot
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[267]"></a>partition</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ltablib.o(i.partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = partition &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[265]"></a>set2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ltablib.o(i.set2))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = set2 &rArr; lua_seti &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[ef]"></a>sort</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ltablib.o(i.sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = sort &rArr; checktab &rArr; luaL_checktype &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[264]"></a>sort_comp</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ltablib.o(i.sort_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = sort_comp &rArr; lua_callk &rArr; luaD_callnoyield &rArr; ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[e9]"></a>tconcat</STRONG> (Thumb, 164 bytes, Stack size 568 bytes, ltablib.o(i.tconcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = tconcat &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>tinsert</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ltablib.o(i.tinsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = tinsert &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>tmove</STRONG> (Thumb, 398 bytes, Stack size 64 bytes, ltablib.o(i.tmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = tmove &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>tpack</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ltablib.o(i.tpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = tpack &rArr; lua_seti &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>tremove</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ltablib.o(i.tremove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = tremove &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>tunpack</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ltablib.o(i.tunpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = tunpack &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; interror &rArr; tag_error &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[287]"></a>callbinTM</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ltm.o(i.callbinTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = callbinTM &rArr; luaT_callTMres &rArr; luaD_callnoyield &rArr; ccall &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_tryconcatTM
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>

<P><STRONG><a name="[296]"></a>checkHeader</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lundump.o(i.checkHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = checkHeader &rArr; checkliteral &rArr; loadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadNumber
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadInteger
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadByte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[297]"></a>checkliteral</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lundump.o(i.checkliteral))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = checkliteral &rArr; loadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBlock
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[299]"></a>error</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lundump.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadUnsigned
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadString
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadByte
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBlock
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[29a]"></a>fchecksize</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lundump.o(i.fchecksize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = fchecksize &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadByte
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[2b5]"></a>loadBlock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lundump.o(i.loadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = loadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadNumber
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadInteger
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadDebug
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadCode
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
</UL>

<P><STRONG><a name="[298]"></a>loadByte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lundump.o(i.loadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadUpvalues
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadUnsigned
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadConstants
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[3f1]"></a>loadCode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lundump.o(i.loadCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = loadCode &rArr; loadInt &rArr; loadUnsigned &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadInt
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[3f5]"></a>loadConstants</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, lundump.o(i.loadConstants))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = loadConstants &rArr; loadString &rArr; loadStringN &rArr; loadSize &rArr; loadUnsigned &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadString
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadNumber
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadInteger
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadInt
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[3f7]"></a>loadDebug</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lundump.o(i.loadDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = loadDebug &rArr; loadStringN &rArr; loadSize &rArr; loadUnsigned &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadInt
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[3f9]"></a>loadFunction</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lundump.o(i.loadFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = loadFunction &rArr; loadConstants &rArr; loadString &rArr; loadStringN &rArr; loadSize &rArr; loadUnsigned &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadUpvalues
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProtos
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadInt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadDebug
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadConstants
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadCode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProtos
</UL>

<P><STRONG><a name="[3f2]"></a>loadInt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lundump.o(i.loadInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = loadInt &rArr; loadUnsigned &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadUpvalues
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProtos
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadDebug
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadConstants
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadCode
</UL>

<P><STRONG><a name="[29b]"></a>loadInteger</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lundump.o(i.loadInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = loadInteger &rArr; loadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadConstants
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[29c]"></a>loadNumber</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lundump.o(i.loadNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = loadNumber &rArr; loadBlock &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadConstants
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[3fb]"></a>loadProtos</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lundump.o(i.loadProtos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + In Cycle
<LI>Call Chain = loadProtos &rArr;  loadFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadInt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[3fd]"></a>loadSize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lundump.o(i.loadSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = loadSize &rArr; loadUnsigned &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
</UL>

<P><STRONG><a name="[3f6]"></a>loadString</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lundump.o(i.loadString))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = loadString &rArr; loadStringN &rArr; loadSize &rArr; loadUnsigned &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadConstants
</UL>

<P><STRONG><a name="[3f8]"></a>loadStringN</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, lundump.o(i.loadStringN))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = loadStringN &rArr; loadSize &rArr; loadUnsigned &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSize
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadString
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadDebug
</UL>

<P><STRONG><a name="[3fc]"></a>loadUnsigned</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lundump.o(i.loadUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = loadUnsigned &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadByte
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSize
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadInt
</UL>

<P><STRONG><a name="[3fa]"></a>loadUpvalues</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lundump.o(i.loadUpvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = loadUpvalues &rArr; loadInt &rArr; loadUnsigned &rArr; loadByte &rArr; error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadInt
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[18a]"></a>LEfloatint</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, lvm.o(i.LEfloatint))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LEfloatint &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
</UL>

<P><STRONG><a name="[18e]"></a>LEintfloat</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lvm.o(i.LEintfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LEintfloat &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
</UL>

<P><STRONG><a name="[18f]"></a>LEnum</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lvm.o(i.LEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LEnum &rArr; LEintfloat &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEfloatint
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[190]"></a>LTfloatint</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lvm.o(i.LTfloatint))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LTfloatint &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
</UL>

<P><STRONG><a name="[191]"></a>LTintfloat</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, lvm.o(i.LTintfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LTintfloat &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
</UL>

<P><STRONG><a name="[192]"></a>LTnum</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lvm.o(i.LTnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LTnum &rArr; LTintfloat &rArr; luaV_flttointeger &rArr; __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTfloatint
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
</UL>

<P><STRONG><a name="[30e]"></a>copy2buff</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lvm.o(i.copy2buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = copy2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>

<P><STRONG><a name="[371]"></a>floatforloop</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lvm.o(i.floatforloop))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = floatforloop &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[373]"></a>forlimit</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, lvm.o(i.forlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = forlimit &rArr; luaV_tonumber_ &rArr; l_strton &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_forerror
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forprep
</UL>

<P><STRONG><a name="[37b]"></a>forprep</STRONG> (Thumb, 516 bytes, Stack size 72 bytes, lvm.o(i.forprep))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + In Cycle
<LI>Call Chain = forprep &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_forerror
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[3dc]"></a>l_strcmp</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lvm.o(i.l_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l_strcmp &rArr; strcoll &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessthanothers
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lessequalothers
</UL>

<P><STRONG><a name="[3dd]"></a>l_strton</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lvm.o(i.l_strton))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = l_strton &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
</UL>

<P><STRONG><a name="[3e5]"></a>lessequalothers</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lvm.o(i.lessequalothers))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lessequalothers &rArr; luaT_callorderTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[3e7]"></a>lessthanothers</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lvm.o(i.lessthanothers))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lessthanothers &rArr; luaT_callorderTM &rArr;  callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
</UL>

<P><STRONG><a name="[49b]"></a>pushclosure</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, lvm.o(i.pushclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pushclosure &rArr; luaF_findupval &rArr; newupval &rArr; luaC_newobj &rArr; luaC_newobjdt &rArr; luaM_malloc_ &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1b4]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_PutChar
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[1b6]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
</UL>

<P><STRONG><a name="[1b7]"></a>_PostTerminalSwitch</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, segger_rtt.o(i._PostTerminalSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _PostTerminalSwitch &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
</UL>

<P><STRONG><a name="[1b8]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostTerminalSwitch
</UL>

<P><STRONG><a name="[205]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f0]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[207]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[206]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[a0]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[10a]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[111]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
